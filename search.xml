<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【C++STL】vector技巧</title>
      <link href="tutorial/%E3%80%90C++STL%E3%80%91vector%E6%8A%80%E5%B7%A7/"/>
      <url>tutorial/%E3%80%90C++STL%E3%80%91vector%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>STL容器操作技巧，以std::vector为例</p></blockquote><a id="more"></a><h3 id="vector的拼接"><a href="#vector的拼接" class="headerlink" title="vector的拼接"></a>vector的拼接</h3><ul><li>把<code>v2</code>拼接到<code>v1</code>后面形成<code>v3</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; <span class="title">v3</span><span class="params">(v1)</span></span>;  <span class="comment">// T是v1和v2的元素类型</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">v3.insert(v3.end(), v2.begin(), v2.end());</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">//   当v2尺寸很小时（size==2），效率比方法一高一倍</span></span><br><span class="line"><span class="comment">//   v2尺寸较大时(size)，效率将逊于方法一</span></span><br><span class="line"><span class="comment">//   测试代码 node-01:/home/taoyi/workspace/p4gitlab/P4ChainWorkTree/super_heavy_dm/script/test/speed_append_vector.cpp</span></span><br><span class="line"><span class="built_in">std</span>::move(v2.begin(), v2.end(), <span class="built_in">std</span>::back_inserter(v1));</span><br></pre></td></tr></table></figure><p><img src="/tutorial/【C++STL】vector技巧/vector_append.png" alt="vector_append" style="zoom: 67%;"></p><ul><li>有重叠的”加和拼接”</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> t1 = <span class="number">0</span>, t2 = <span class="number">2</span>;  <span class="comment">// v1和v2的“绝对”起始时间</span></span><br><span class="line"><span class="keyword">auto</span> start_time_diff = t2 - t1;</span><br><span class="line"><span class="keyword">auto</span> new_size = start_time_diff + v2.size();</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; <span class="title">v3</span><span class="params">(v1)</span></span>;   <span class="comment">// T是v1和v2的元素类型</span></span><br><span class="line"><span class="keyword">if</span> (v3.size() &lt; new_size) &#123;</span><br><span class="line">    v3.resize(new_size, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::transform(v3.begin() + start_time_diff,</span><br><span class="line">               v3.begin() + new_size,</span><br><span class="line">               v2.begin(), v3.begin() + start_time_diff,</span><br><span class="line">               <span class="built_in">std</span>::plus&lt;&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure><p><img src="/tutorial/【C++STL】vector技巧/vector_plus_append.png" alt="vector_plus_append" style="zoom: 67%;"></p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Stat】效率的误差估计</title>
      <link href="academic/%E3%80%90Stat%E3%80%91%E6%95%88%E7%8E%87%E7%9A%84%E8%AF%AF%E5%B7%AE%E4%BC%B0%E8%AE%A1/"/>
      <url>academic/%E3%80%90Stat%E3%80%91%E6%95%88%E7%8E%87%E7%9A%84%E8%AF%AF%E5%B7%AE%E4%BC%B0%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>效率的误差估计不是简单的Poisson涨落，二项分布统计可以给出一个很好的近似结果，而最正确的方式是采用Bayes统计所得出的结果。</p></blockquote><a id="more"></a><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>粒子物理实验中，由于各种各样的限制因素，实际得到（或采用）的数据与预期（或全部）的数据之间，存在统计量上的差别，这就是所谓的探测效率（截断效率）。效率的概念可以延申到<strong>任意分布的每个区间中受到某种影响所给出的计数</strong>占<strong>该区间受到相应影响前的总计数</strong>的<strong>比例</strong>。因此，在得到效率的测量结果时，同样需要考虑该结果的测量误差。本文旨在整理效率的误差的正确的计算方式。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>记所研究区间的总计数为$n$（或$n_i$，下同），该区间中选出的计数为$k$，则选择效率$\varepsilon=\cfrac{k}{n}$。为了描述方便，下文以“事例通过某种事例截断条件“这一应用场景为例进行讨论，这时kk是所研究区间通过了截断条件的事例数量，简称好事例计数，$n$为在应用这一截断条件的总计数。</p><h2 id="问题的解决"><a href="#问题的解决" class="headerlink" title="问题的解决"></a>问题的解决</h2><h3 id="Poisson统计"><a href="#Poisson统计" class="headerlink" title="Poisson统计"></a>Poisson统计</h3><p>在Poisson统计方法下，认为$k$和$n$是独立的，它们的误差分别是$\sigma_k = \sqrt{k}$和$\sigma_n = \sqrt{n}$，从误差传递公式出发</p><script type="math/tex; mode=display">\sigma_\varepsilon^2 = \Big(\frac{\partial\varepsilon}{\partial k}\Big)^2\sigma_k^2 + \Big(\frac{\partial\varepsilon}{\partial n}\Big)^2\sigma_n^2 = \frac{1}{n^2}k+\frac{k^2}{n^4}n = \frac{\varepsilon(1+\varepsilon)}{n}</script><p>更一般的，对于两个随机变量的积或商（即$\varepsilon = xy$或$\varepsilon = x/y$），误差传递遵循（亦可由$\sigma_{\mathrm{ln}\varepsilon}^2 = \sigma_{\mathrm{ln}x}^2 + \sigma_{\mathrm{ln}y}^2$直接得到）</p><script type="math/tex; mode=display">\Big(\frac{\sigma_\varepsilon}{\varepsilon}\Big)^2 = \Big(\frac{\sigma_x}{x}\Big)^2 + \Big(\frac{\sigma_y}{y}\Big)^2</script><ul><li>Poisson统计的问题：<ul><li>对于$n$完全确定的情况，$\sigma_n = 0$，此时$\sigma_\varepsilon = \cfrac{\sqrt{k}}{n}$。</li><li>$\sigma_\varepsilon\Big\vert_{k=0,n=1} \equiv 1$，这意味着，无论$n$是何值，实验或分析中的某种因素使得我们没有得到任何结果计数时，这样的过程没有误差，这显然是不合理的。</li><li>$\cfrac{\mathrm{d}\sigma_\varepsilon^2}{\mathrm{d}k} = \cfrac{1}{n^2} + \cfrac{2k}{n^3} &gt; 0$，说明误差随着$k$增大而单调变大，这也是不合理的。</li><li>事实上，$k$与$n$并非独立，而是关联性很强，$k$来自于$n$。</li></ul></li></ul><h3 id="二项分布统计"><a href="#二项分布统计" class="headerlink" title="二项分布统计"></a>二项分布统计</h3><p>我们可以将“好事例通过事例截断条件“这一过程看成是通过概率为$\varepsilon$的二项分布（随机变量是$k$）。这里认为$n$是给定的，显然$\varepsilon$也认为是确定的。于是，好事例计数为$k$的概率为</p><script type="math/tex; mode=display">P(k;\varepsilon,n) = C^k_n\varepsilon^k(1−\varepsilon)^{n−k}</script><p>易知均值$\bar{k}=n\varepsilon$，方差$V(k) = \sigma_k^2 = nε(1−\varepsilon)$。因此</p><script type="math/tex; mode=display">V(\varepsilon)=V\Big(\frac{k}{n}\Big)=\frac{1}{n^2}V(k)=\frac{\varepsilon(1−\varepsilon)}{n}</script><ul><li>二项分布统计的问题<ul><li>$\varepsilon$认为是确定的出发点和我们计算其误差本身是矛盾的。</li><li>$\sigma_\varepsilon\Big\vert_{k=0} \equiv 0$，$\sigma_\varepsilon\Big\vert_{k=n} \equiv 0$。</li></ul></li></ul><h3 id="Bayes统计"><a href="#Bayes统计" class="headerlink" title="Bayes统计"></a>Bayes统计</h3><p>我们的研究对象是$\varepsilon$（给定$n$和$k$的测量值），因此误差分布应具有$P(\varepsilon;k,n)$的形式，根据Bayes公式：</p><script type="math/tex; mode=display">P(\varepsilon;k,n) = \frac{P(k;\varepsilon,n)P(\varepsilon;n)}{C}</script><p>其中，</p><ul><li><p>$P(k;\varepsilon,n)$即为二项分布方法中的分布函数。</p></li><li><p>$P(\varepsilon;n)$是先验概率，由于$\varepsilon\in[0,1]$，并且我们在data blind的情况下没有任何理由认为某个$\varepsilon$比其他的可能性更高或更低，因此</p><script type="math/tex; mode=display">P(\varepsilon;n)=\begin{cases}1,\quad \mathrm{if}\ \ 0\leqslant\varepsilon\leqslant1 \\ 0,\quad \mathrm{otherwise}\end{cases}</script></li><li><p>$C=P(k;n)=\int P(k;\varepsilon’,n)P(\varepsilon’;n)d\varepsilon’$是常数，在$n$给定情况下，$k$可以等概率的取$0,1,\cdots,n$共$n+1$中情况，从而可以得出$C=\cfrac{1}{n+1}$。另一种方法是直接计算归一化积分：</p><script type="math/tex; mode=display">\begin{align}1 =& \int_{-\infty}^{\infty} P(\varepsilon';k,n)\mathrm{d}\varepsilon' = \frac{1}{C} \int_{-\infty}^{\infty}P(k;\varepsilon',n)P(\varepsilon';n)d\varepsilon' = \frac{1}{C} C^k_n \int_0^1 {\varepsilon'}^k(1-\varepsilon')^{n-k}d\varepsilon' \\ =& \frac{1}{C} C^k_n B(k+1, n-k+1) = \frac{1}{C} C^k_n\frac{\Gamma(k+1)\Gamma(n-k+1)}{\Gamma(n+2)} = \frac{1}{C}\frac{n!}{(n-k)!}\frac{k!(n-k)!}{(n+1)!} \\ =& \frac{1}{C(n+1)}\qquad\rightarrow\qquad C=\frac{1}{n+1}\end{align}</script></li></ul><p>最终，我们得到$\varepsilon$的分布律</p><script type="math/tex; mode=display">P(\varepsilon;k,n) = \frac{(n+1)!}{k!(n−k)!}\varepsilon^k(1−\varepsilon)^{n−k}</script><p>均值和方差</p><script type="math/tex; mode=display">\bar{\varepsilon} = \int_0^1 \varepsilon' P(\varepsilon';k,n)\mathrm{d}\varepsilon' = \frac{(n+1)!}{k!(n-k)!} \int_0^1 {\varepsilon'}^{k+1}(1-\varepsilon')^{n-k}\mathrm{d}\varepsilon' = \frac{(n+1)!}{k!(n−k)!}\frac{(k+1)!(n-k)!}{(n+2)!} = \frac{k+1}{n+2}</script><script type="math/tex; mode=display">\sigma_\varepsilon^2 = \bar{\varepsilon^2} - \bar{\varepsilon}^2 = \frac{(n+1)!}{k!(n−k)!}\frac{(k+2)!(n-k)!}{(n+3)!} - \Big(\frac{k+1}{n+2}\Big)^2 = \frac{(k+1)(k+2)}{(n+2)(n+3)} - \Big(\frac{k+1}{n+2}\Big)^2 = \frac{(n-k+1)(k+1)}{(n+2)^2(n+3)}</script><ul><li>Bayes统计的一些结论<ul><li>$\sigma_\varepsilon\Big\vert_{k=0} = \sigma_\varepsilon\Big\vert_{k=n} = \cfrac{n+1}{(n+2)^2(n+3)}$，当$n$很大时，这个值趋近于$\cfrac{1}{n^2}$。</li></ul></li></ul><h2 id="对比与总结"><a href="#对比与总结" class="headerlink" title="对比与总结"></a>对比与总结</h2><ul><li>将以上三种计算效率的误差方式对三种$n$的情况进行对比：</li></ul><p><img src="/academic/【Stat】效率的误差估计/eff_err_vs_k.png" style="zoom: 25%;" div align="center"></p><p>可以看到，当$n$给定时，二项分布在$k$较小时趋于Possion分布，在$k$较大时趋于Bayes统计分布。  </p><ul><li>下图则更明显地显示出Possion统计在效率较大时的偏离问题，以及Bayes统计对于极端情形下更合理的结果。注意到，统计量越大时（指$n$越大），每一种统计得到的效率的误差都越小，这是符合预期的。</li></ul><p><img src="/academic/【Stat】效率的误差估计/eff_err_vs_eff.png" style="zoom: 25%;" div align="center"></p><ul><li>Bayes统计方案，从$\varepsilon$的分布律中可以看到误差$\sigma_\varepsilon$相较于最可几值是左右不对称的（取平均值左右$1$个$\sigma$），分别为（注意：由于效率定义的特殊性，大于1（或小于0）将被直接限制在1（或0））<script type="math/tex; mode=display">\sigma_\varepsilon^\mathrm{left} = \varepsilon_\mathrm{m.p.} - \bar{\varepsilon} + \sigma_\varepsilon,\qquad \sigma_\varepsilon^\mathrm{right} =  \bar{\varepsilon} + \sigma_\varepsilon - \varepsilon_\mathrm{m.p.}</script>我们可以检验这种误差的合理性，下图中给出了$\sigma_\varepsilon^\mathrm{left}$到$\sigma_\varepsilon^\mathrm{right}$覆盖范围与高斯分布左右$1\sigma(\sim68.3\%)$的对比：</li></ul><ul><li>统计结果汇总于下表</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">统计方法</th><th style="text-align:center">效率均值</th><th style="text-align:center">效率最可几值</th><th style="text-align:center">效率误差(平均值$1\sigma$)</th></tr></thead><tbody><tr><td style="text-align:center">Possion统计</td><td style="text-align:center">$\varepsilon\equiv\cfrac{k}{n}$</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">$\cfrac{\varepsilon(1+\varepsilon)}{n}$</td></tr><tr><td style="text-align:center">二项分布统计</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">$\cfrac{\varepsilon(1−\varepsilon)}{n}$</td></tr><tr><td style="text-align:center">Bayes统计</td><td style="text-align:center">$\cfrac{k+1}{n+2}$</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">$\sqrt{\cfrac{(n-k+1)(k+1)}{(n+2)^2(n+3)}}$</td></tr></tbody></table></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://facultystaff.richmond.edu/~ggilfoyl/research/EfficiencyErrors.pdf" target="_blank" rel="noopener">Calculating Efficiency Uncertainties (richmond.edu)</a></li><li><a href="https://lss.fnal.gov/archive/test-tm/2000/fermilab-tm-2286-cd.pdf" target="_blank" rel="noopener">fermilab-tm-2286-cd.pdf (fnal.gov)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> statistics </tag>
            
            <tag> efficiency </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ROOT】Win10-WSL安装CERN ROOT (roo6)</title>
      <link href="tutorial/%E3%80%90ROOT%E3%80%91Win10-WSL%E5%AE%89%E8%A3%85CERN%20ROOT%20(root6)/"/>
      <url>tutorial/%E3%80%90ROOT%E3%80%91Win10-WSL%E5%AE%89%E8%A3%85CERN%20ROOT%20(root6)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo是一款流行的博客框架，基于Node.js，支持Markdown语法。这篇文章记录我如何完成搭建并部署到Github Pages上。</p><p>ROOT是高能物理领域数据分析的常用工具，本文详细记录了在Windows10系统机器的WSL中安装CERN ROOT的过程。</p></blockquote><a id="more"></a><h3 id="安装CERN-ROOT-root6"><a href="#安装CERN-ROOT-root6" class="headerlink" title="安装CERN ROOT (root6)"></a>安装CERN ROOT (root6)</h3><ul><li><p>安装root6的全部依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必选</span></span><br><span class="line">sudo apt install dpkg-dev cmake g++ gcc binutils libx11-dev libxpm-dev libxft-dev libxext-dev python openssl libssl-dev</span><br><span class="line"><span class="comment"># 可选（也都装上）</span></span><br><span class="line">sudo apt install gfortran libpcre3-dev xlibmesa-glu-dev libglew1.5-dev libftgl-dev</span><br><span class="line"> default-libmysqlclient-dev libfftw3-dev libcfitsio-dev graphviz-dev libavahi-compat-libdnssd-dev libldap2-dev python-dev libxml2-dev libkrb5-dev libgsl0-dev libqt4-dev</span><br><span class="line"><span class="comment"># 后来发现需要装的</span></span><br><span class="line">sudo apt install mpi-default-dev</span><br></pre></td></tr></table></figure></li></ul><p>注：<a href="https://root.cern/install/#download-a-pre-compiled-binary-distribution" target="_blank" rel="noopener">官网</a>给的<a href="https://root.cern/install/dependencies/" target="_blank" rel="noopener">依赖指示</a>中的<code>openssl-dev</code>是错误的，已经替换成正确的<code>openssl</code> 和<code>libssl-dev</code>（<a href="https://blog.csdn.net/liujian8654562/article/details/101113461" target="_blank" rel="noopener">参考1</a>）。类似地，<code>libmysqlclient-dev</code>也已经换成<code>default-libmysqlclient-dev</code>（<a href="https://askubuntu.com/questions/1043900/package-libmysqlclient-dev-has-no-installation-candidate" target="_blank" rel="noopener">参考2</a>）。</p><ul><li><p>安装<code>cmake</code>的辅助工具<code>cmake-curses-gui</code>（包含<code>ccmake</code>）来方便显示<code>cmake</code>时的开关参量（<a href="https://packages.debian.org/buster/cmake-curses-gui" target="_blank" rel="noopener">参考</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install cmake-curses-gui</span><br></pre></td></tr></table></figure></li><li><p>创建build目录和安装目录，并进入build目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir root_build root_install &amp;&amp; <span class="built_in">cd</span> root_build</span><br></pre></td></tr></table></figure><p>注：<a href="https://root.cern/install/#download-a-pre-compiled-binary-distribution" target="_blank" rel="noopener">官网</a>的第一个直接下载安装版需要gcc9.2（Debian 10里的是gcc8.3），因此还是选择通过编译源码进行安装。</p></li><li><p>在win10下chrome浏览器从<a href="https://root.cern/releases/release-62202/" target="_blank" rel="noopener">官网</a>下载最新releases版压缩包，然后将压缩包移到build目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /mnt/c/Users/Dolphin92/Downloads/root_v6.22.02.source.tar.gz .</span><br></pre></td></tr></table></figure><p>当然浏览器右键获取压缩包所在链接，也可以在Debian Linux下直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://root.cern/download/root_v6.22.02.source.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压与预编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf root_v6.22.00.Linux-ubuntu19-x86_64-gcc9.2.tar.gz</span><br><span class="line"><span class="comment"># 预编译</span></span><br><span class="line">cmake ../root-6.22.02/</span><br><span class="line"><span class="comment"># 调整开关参量</span></span><br><span class="line">ccmake .</span><br></pre></td></tr></table></figure><p>在设置开关参量的过程中打开<code>minuit2</code>，<code>qt5web</code>，<code>tmva</code>，<code>gnu_install</code>。</p><p>将<code>CMAKE_INSTALL_PREFIX</code>设置为<code>/home/taoyi/programs/cern_root/root_install</code>，然后执行<code>c</code>(configure)和<code>g</code>(generate)。</p><p>接下来，由于root的cmake过程中会忽略<code>PYTHON_EXECUTABLE</code>等配置Python路径的相关参数，所以需要手动敲命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmake \</span><br><span class="line">-DPYTHON_EXECUTABLE=/usr/bin/python3 \</span><br><span class="line">-DPYTHON_INCLUDE_DIR=/usr/include/python3.7/ \</span><br><span class="line">-DPYTHON_LIBRARY=/usr/lib/python3.7/ \</span><br><span class="line">../root-6.22.02/</span><br></pre></td></tr></table></figure><p>注意到以下一些关于所安装的ROOT支持功能的输出列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- Enabled support <span class="keyword">for</span>:  asimage builtin_afterimage builtin_clang builtin_gl2ps builtin_llvm builtin_lz4 builtin_lzma builtin_tbb builtin_vdt builtin_xrootd builtin_xxhash builtin_zstd clad dataframe exceptions fftw3 fitsio gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pyroot qt5web roofit runtime_cxxmodules shared ssl tmva tmva-cpu spectrum vdt x11 xml xrootd</span><br></pre></td></tr></table></figure></li><li><p>编译（4核）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake --build . -- install -j4</span><br></pre></td></tr></table></figure><p>注：此过程耗时较长（30min-2h）。</p></li><li><p>加载root的脚本，主要是确定是哪个版本（当机器中装了多个版本时）。为了避免每次开新终端都要执行加载命令，也放在<code>~/.bash_profile</code>中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CERN ROOT</span></span><br><span class="line"><span class="built_in">source</span> <span class="variable">$HOME</span>/programs/cern_root/root_install/bin/thisroot.sh</span><br></pre></td></tr></table></figure><p>最后source一下<code>.bash_profile</code>（或者直接关闭重开一个终端）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最最后测试一下root的图形显示是否正常（@see<a href="#WSL中的软件显示图形界面">WSL中的软件显示图形界面</a>，发现除了没有开机动画，剩下都能显示出来，这倒是个方便的事情，以后<code>root</code>不需要敲<code>-l</code>参数了）。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> HEP </tag>
            
            <tag> ROOT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【运维】.profile与.bash_profile</title>
      <link href="tutorial/%E3%80%90%E8%BF%90%E7%BB%B4%E3%80%91.profile%E4%B8%8E.bash_profile/"/>
      <url>tutorial/%E3%80%90%E8%BF%90%E7%BB%B4%E3%80%91.profile%E4%B8%8E.bash_profile/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如何使新添加的<code>.bash_profile</code>文件自动加载<code>.åbashrc</code></p></blockquote><a id="more"></a><p>服务器是Ubuntu的操作系统，使用的是<code>bash</code>环境。<br>系统本身自带<code>.bashrc</code>和<code>.profile</code>配置文件，由于希望在不改动原始的<code>.bashrc</code>文件下，添加一些针对<code>bash</code>的配置，于是自行添加<code>.bash_profile</code>文件。而当用户新加入<code>.bash_profile</code>后，需要将<code>.profile</code>的内容添加到<code>.bash_profile</code>中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if running bash</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$BASH_VERSION</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># include .bashrc if it exists</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$HOME</span>/.bashrc"</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">"<span class="variable">$HOME</span>/.bashrc"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set PATH so it includes user's private bin if it exists</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$HOME</span>/bin"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    PATH=<span class="string">"<span class="variable">$HOME</span>/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样才能在每次登陆时自动加载<code>.bashrc</code>。</p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维 </tag>
            
            <tag> profile </tag>
            
            <tag> bash_profile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux-Shell】制作动态GIF</title>
      <link href="tutorial/%E3%80%90Linux-Shell%E3%80%91%E5%88%B6%E4%BD%9C%E5%8A%A8%E6%80%81GIF/"/>
      <url>tutorial/%E3%80%90Linux-Shell%E3%80%91%E5%88%B6%E4%BD%9C%E5%8A%A8%E6%80%81GIF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用Imagemagick工具制作动态GIF</p></blockquote><a id="more"></a><ul><li><p>倒放<code>gif</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert &lt;原始gif路径文件名&gt; -coalesce -reverse -quiet -layers OptimizePlus -loop 0 &lt;倒放的gif路径文件名&gt;</span><br></pre></td></tr></table></figure></li><li><p>合成动态<code>gif</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -delay &lt;每张间隔多少个10ms&gt; -loop 0 &lt;所有原料png&gt; &lt;合成gif名称&gt;</span><br></pre></td></tr></table></figure></li><li><p>将已合成的<code>gif</code>拆分成素材<code>png</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert &lt;已合成的gif&gt; -coalesce &lt;素材png的路径文件名&gt;</span><br></pre></td></tr></table></figure></li></ul><p>注：<code>&lt;素材png的路径文件名&gt;</code>可以设置编号格式，例如：<code>img/recoil_map_%03d.png</code>将给出<code>img/recoil_map_000.png</code>，<code>img/recoil_map_001.png</code>等等。</p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
            <tag> Imagemagick </tag>
            
            <tag> convert </tag>
            
            <tag> 动态GIF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】迁移Hexo博客（CentOS-to-MacOS）</title>
      <link href="tutorial/%E3%80%90Hexo%E3%80%91%E8%BF%81%E7%A7%BBHexo%E5%8D%9A%E5%AE%A2%EF%BC%88CentOS-to-MacOS%EF%BC%89/"/>
      <url>tutorial/%E3%80%90Hexo%E3%80%91%E8%BF%81%E7%A7%BBHexo%E5%8D%9A%E5%AE%A2%EF%BC%88CentOS-to-MacOS%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章记录我将Hexo博客迁移至本地机（MacOS系统）上的过程。</p></blockquote><a id="more"></a><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>保证本地机已经安装好了<code>Node.js</code>,<code>git</code>和<code>npm</code>（安装过程略）。</p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo命令行客户端(如果速度慢记得换源)</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="comment"># 创建并进入项目目录</span></span><br><span class="line">mkdir HexoBlog &amp;&amp; <span class="built_in">cd</span> HexoBlog</span><br><span class="line"><span class="comment"># 初始化Node.js模块</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h1 id="将必需的文件和目录拷贝到本地"><a href="#将必需的文件和目录拷贝到本地" class="headerlink" title="将必需的文件和目录拷贝到本地"></a>将必需的文件和目录拷贝到本地</h1><p>这些文件包括<code>_config.yml</code>，<code>package.json</code>，<code>scaffolds/</code>，<code>source/</code>，<code>themes/</code>，<code>.gitignore</code>和<code>.deploy_git/</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scp &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/_config.yml .</span><br><span class="line">scp &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/package.json . </span><br><span class="line">scp -r &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/scaffolds .</span><br><span class="line">scp -r &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/<span class="built_in">source</span> .</span><br><span class="line">scp -r &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/themes .</span><br><span class="line">scp &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/.gitignore .</span><br><span class="line">scp -r &lt;我的账户&gt;@&lt;我的ECS公网ip&gt;:Blog/.deploy_git .</span><br></pre></td></tr></table></figure><h1 id="安装一些插件"><a href="#安装一些插件" class="headerlink" title="安装一些插件"></a>安装一些插件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save             <span class="comment"># 为了使用Github Pages</span></span><br><span class="line">npm install hexo-generator-feed --save           <span class="comment"># 添加RSS</span></span><br><span class="line">npm install hexo-generator-sitemap --save        <span class="comment"># Google收录</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save  <span class="comment"># 百度收录</span></span><br><span class="line">npm uninstall</span><br></pre></td></tr></table></figure><h1 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g      <span class="comment"># 或者`hexo generate`</span></span><br><span class="line">hexo d      <span class="comment"># 或者`hexo deploy`</span></span><br><span class="line"><span class="comment"># 后两步可合并为</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>这里遇到一个hexo不兼容<code>{{}}</code>标签的问题（标签冲突），参照<a href="http://xcoding.tech/2020/01/18/hexo/如何从根本解决hexo不兼容{{}}标签问题/" target="_blank" rel="noopener">这篇博客</a>修改相应文件即可。</li><li><code>yilia</code>主题下增加<code>LaTeX</code>支持的<a href="https://blog.csdn.net/Aoman_Hao/article/details/81381507" target="_blank" rel="noopener">解决步骤</a>，这个博主的其他文章。</li></ul><h1 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h1><p>访问地址为<code>https://&lt;guser&gt;.github.io/</code>，发现博客文章已经可以在本地更新了。</p><p>完成！！</p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【CMFT】CMFT_Note01_从粒子到场</title>
      <link href="academic/%E3%80%90CMFT%E3%80%91CMFT-Note01-%E4%BB%8E%E7%B2%92%E5%AD%90%E5%88%B0%E5%9C%BA/"/>
      <url>academic/%E3%80%90CMFT%E3%80%91CMFT-Note01-%E4%BB%8E%E7%B2%92%E5%AD%90%E5%88%B0%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>凝聚态系统中引入场的理论描述</p></blockquote><a id="more"></a><h1 id="第一章-从粒子到场"><a href="#第一章-从粒子到场" class="headerlink" title="第一章 从粒子到场"></a>第一章 从粒子到场</h1><h2 id="General"><a href="#General" class="headerlink" title="General"></a>General</h2><h3 id="Prototype-Hamiltonian"><a href="#Prototype-Hamiltonian" class="headerlink" title="Prototype Hamiltonian"></a>Prototype Hamiltonian</h3><p>多粒子哈密顿量的最简单形式（没有考虑粒子自旋、无序性、晶格结构等）：$H = H_{\text{e}} + H_{\text{i}} + H_{\text{ei}}$</p><script type="math/tex; mode=display">\begin{align} \text{价电子动力学:}\quad H_{\text{e}} &= \sum_{i}\frac{\vec{p}_{i}^2}{2m} + \sum_{i<j}V_{\text{ee}}(\vec{r}_{i}-\vec{r}_{j}) \\ \text{离子核动力学:}\quad H_{\text{i}} &= \sum_{I}\frac{\vec{P}_{I}^2}{2M} + \sum_{I<J}V_{\text{ii}}(\vec{R}_{I}-\vec{R}_{J}) \\ \text{电子离子相互作用:}\quad H_{\text{ei}} &= \sum_{iI}V_{\text{ei}}(\vec{R}_{I}-\vec{r}_{i}) \end{align}</script><h3 id="凝聚态系统的通用基本原理"><a href="#凝聚态系统的通用基本原理" class="headerlink" title="凝聚态系统的通用基本原理"></a>凝聚态系统的通用基本原理</h3><ol><li>结构的<strong>可还原性（可化归）</strong>：$H_{\text{e}}$、$H_{\text{i}}$和$H_{\text{ei}}$彼此之间在特定问题中可视为独立的。(还原论思想)</li><li>凝聚态物理中通常只关心一些<strong>低能态动力学</strong>。一方面是由于日常生活中我们所关注的能态范围，另一方面，低温下不同的微观细节通常有相同的集体行为。</li><li>绝大多数体系的<strong>自由度是阿伏伽德罗常数$N_{A}$的量级（$\mathcal{O}(10^{23})$）</strong>。好处：我们可以使用统计方法和概念，而统计误差有微乎其微。</li><li>凝聚态系统通常拥有<strong>内禀的对称性</strong>。研究步骤：<strong>对称性$\rightarrow$守恒律$\rightarrow$低能激发</strong>。</li></ol><h3 id="两种公式化方案：“拉格朗日形式-Lagrangian-Formulation-”和“哈密顿形式-Hamiltonian-Formulation-”。"><a href="#两种公式化方案：“拉格朗日形式-Lagrangian-Formulation-”和“哈密顿形式-Hamiltonian-Formulation-”。" class="headerlink" title="两种公式化方案：“拉格朗日形式(Lagrangian Formulation)”和“哈密顿形式(Hamiltonian Formulation)”。"></a>两种公式化方案：“拉格朗日形式(Lagrangian Formulation)”和“哈密顿形式(Hamiltonian Formulation)”。</h3><h4 id="拉格朗日形式"><a href="#拉格朗日形式" class="headerlink" title="拉格朗日形式"></a>拉格朗日形式</h4><p>哈密顿量在<strong>将微观模型化归为低能有效理论</strong>时通常不是一个方便的出发点，而更有效的做法是从作用量出发。<strong>拉格朗日作用量</strong>（简称<strong>作用量</strong>，理论力学里面称为哈密顿作用量(?)）定义为$S=\int_{0}^{t_0}L(x,\dot{x})\text{d}t$，$L$是<strong>拉格朗日量</strong>。为了得到具体的物理信息，我们需要导出<strong>运动方程</strong>。</p><blockquote><p>可能不太严谨的地方：这里的$\dot{z}$总是表示$\cfrac{\partial z}{\partial t}$。</p></blockquote><h4 id="哈密顿形式"><a href="#哈密顿形式" class="headerlink" title="哈密顿形式"></a>哈密顿形式</h4><p>研究激发态能量。点粒子的共轭动量为$p\equiv\partial_{\dot{x}}L$。并且有Legendre变换关系：$H(p,x) = \sum p\dot{x}-L(x,\dot{x})\vert_{\dot{x}=\dot{x}(p,x)}$</p><p>为了导出场论的<strong>运动方程</strong>，首先要将哈密顿原理推广至无穷维情形。</p><h5 id="经典-哈密顿原理-Hamilton’s-extremal-principle"><a href="#经典-哈密顿原理-Hamilton’s-extremal-principle" class="headerlink" title="(经典)哈密顿原理(Hamilton’s extremal principle)"></a>(经典)<strong>哈密顿原理(Hamilton’s extremal principle)</strong></h5><ul><li>实际的物理构型$x(t)$总是使作用量取极值，即等时变分$\delta S[x]=0$。这意味着，对于任意光滑曲线$t \mapsto y(t)$，<script type="math/tex; mode=display">\begin{align} \lim_{\epsilon\rightarrow0}\frac{S[x+\epsilon y] - S[x]}{\epsilon} = 0 \end{align}</script>由此出发，<script type="math/tex; mode=display">\begin{align} 0 = \delta S[x] &= \delta\int L(x,\dot{x})\text{d}t = \int \delta L(x,\dot{x})\text{d}t \\ &= \int \Big( \frac{\partial L}{\partial\dot{x}}\delta\dot{x} + \frac{\partial L}{\partial x}\delta x \Big)\text{d}t \\ &= \int \Big[\frac{\text{d}}{\text{d}t}\Big( \frac{\partial L}{\partial\dot{x}}\delta x \Big) - \frac{\text{d}}{\text{d}t}\Big( \frac{\partial L}{\partial\dot{x}}\Big)\delta x + \frac{\partial L}{\partial x}\delta x \Big] \text{d}t \\ &= -\int \Big[- \frac{\text{d}}{\text{d}t}\Big( \frac{\partial L}{\partial\dot{x}}\Big) + \frac{\partial L}{\partial x} \Big]\delta x \text{d}t \end{align}</script>上式最后一步用到了等时变分全微分积分为$0$（一维情况的积分上下限就是一维区间的边界，即$x\big\vert_{\partial t} = 0$）。由于$\delta x$的任意性，因此得到$x$所满足的拉格朗日运动方程（<strong>Lagrange方程</strong>）<script type="math/tex; mode=display">\begin{align} \frac{\text{d}}{\text{d}t}\Big( \frac{\partial L}{\partial\dot{x}}\Big) - \frac{\partial L}{\partial x} = 0 \end{align}</script></li></ul><h5 id="【数学工具】泛函微分"><a href="#【数学工具】泛函微分" class="headerlink" title="【数学工具】泛函微分"></a>【数学工具】泛函微分</h5><ul><li><p>泛函的宗量是函数。与函数的研究类似，我们在研究泛函时也是对泛函的(微小)变化时的行为、泛函驻点感兴趣。泛函的驻点的含义是：在变换$f \rightarrow f+h$下（$h$是无穷小增量函数），泛函保持不变。一个泛函$F$称为可微的，若</p><script type="math/tex; mode=display">\begin{align} F[f + \epsilon g] - F[f] = \epsilon\cdot \text{D}F_{f}[g] + \mathcal{O}(\epsilon^2) \end{align}</script><p>其中，<strong>$\text{D}F_{f}$是线性泛函</strong>（满足$\text{D}F_{f}[g_{1}+g_{2}] = \text{D}F_{f}[g_{1}] + \text{D}F_{f}[g_{2}]$），$\epsilon$是无穷小参数，$g$是任意函数。<strong>定义泛函$F$的驻点在$f$，当且仅当$\text{D}F_{f} = 0$。</strong></p></li><li><p>为了更好地理解泛函$F[f]$的总量$f$，将它视为$N$维矢量$\vec{f}=\{f_{n} \equiv f(x_{n}), n=1,\cdots,N\}$在$N\rightarrow\infty$的极限（$x_n$是一组线性无关矢量，或一组<strong>基</strong>）。于是$F(\vec{f})$是一个定义在$N$维空间上的函数，在连续极限下，$\vec{f}\rightarrow f$演变为函数，同时$F(\vec{f})\rightarrow F[f]$演变为泛函。下表对于离散和取连续极限两种情形作了一个对比总结：</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">离散情形</th><th style="text-align:center">连续极限（$N\rightarrow\infty$）情形</th></tr></thead><tbody><tr><td style="text-align:center">空间维数</td><td style="text-align:center">有限$N$维</td><td style="text-align:center">无限维</td></tr><tr><td style="text-align:center">单位基</td><td style="text-align:center">$\vec{e}_{n}$，只有第$n$分量为$1$，其余为$0$</td><td style="text-align:center">$\delta_{x}$，其中$\delta_{x}(x’) \equiv \delta(x-x’)$</td></tr><tr><td style="text-align:center">内积</td><td style="text-align:center"><script type="math/tex">\begin{align}\langle \vec{f},\vec{g} \rangle \equiv \sum_{n=1}^{N} f_{n} g_{n}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align}\langle f, g \rangle \equiv \int f(x) g(x)\text{d}x\end{align}</script></td></tr><tr><td style="text-align:center">宗量</td><td style="text-align:center">$\vec{f} = \{f_{n} \equiv f(x_{n}), n=1,\cdots,N\}$</td><td style="text-align:center">$f$</td></tr><tr><td style="text-align:center">宗量投影分量</td><td style="text-align:center"><script type="math/tex">\begin{align}f_{n} = \langle \vec{f},\vec{e}_n \rangle = \sum_{m=1}^{N}f_{m}(\vec{e}_{n})_{m}\end{align}</script>，$(\vec{e}_{n})_{m} = \delta_{nm}$</td><td style="text-align:center"><script type="math/tex">\begin{align}f(x) = \langle f, \delta_x \rangle = \int f(x')\delta_{x}(x')\text{d}x'\end{align}</script></td></tr><tr><td style="text-align:center">函子</td><td style="text-align:center">$F(\vec{f})$</td><td style="text-align:center">$F[f]$</td></tr><tr><td style="text-align:center">偏微分</td><td style="text-align:center"><script type="math/tex">\begin{align}\partial_{f_n}F(\vec{f}) \equiv \lim_{\epsilon\rightarrow 0} \frac{F(\vec{f}+\epsilon\vec{e}_{n}) - F(\vec{f})}{\epsilon}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \frac{\delta F[f]}{\delta f(x)} \equiv \lim_{\epsilon\rightarrow 0}\frac{F[f+\epsilon\delta_{x}] - F[f]}{\epsilon} \end{align}</script></td></tr><tr><td style="text-align:center">全微分</td><td style="text-align:center"><script type="math/tex">\begin{align}\text{d}F_{\vec{f}}(\vec{g}) \equiv \langle\nabla F_{\vec{f}},\vec{g} \rangle = \sum_{n=1}^{N} \partial_{f_{n}}F(\vec{f})g_{n}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \text{D}F_{f}[g] = \int \frac{\delta F[f]}{\delta f(x)}g(x) \text{d}x \end{align}</script></td></tr><tr><td style="text-align:center">(变)微分</td><td style="text-align:center"><script type="math/tex">\begin{align}F(\vec{f}+\epsilon\vec{g})-F(\vec{f}) = \epsilon\cdot\text{d}F_{\vec{f}}(\vec{g}) + \mathcal{O}(\epsilon^2)\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align}F[f + \epsilon g] - F[f] = \epsilon\cdot \text{D}F_{f}[g] + \mathcal{O}(\epsilon^2)\end{align}</script></td></tr><tr><td style="text-align:center">链式法则</td><td style="text-align:center"><script type="math/tex">\begin{align} \partial_{f_n}F(\vec{g}(\vec{f})) = \sum_{m=1}^{N}\partial_{g_m}F(\vec{g})\Big\vert_{\vec{g}=\vec{g}(\vec{f})}\partial_{f_n}g_{m}(f_m) \end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \frac{\delta F[g[f]]}{\delta f(x)} = \int \frac{\delta F[g]}{\delta g(y)}\Bigg\vert_{g=g[f]}\frac{\delta g(y)[f]}{\delta f(x)} \text{d}y \end{align}</script></td></tr></tbody></table></div><ul><li>这里的记号$g[f]$是一个对$\vec{g}:\mathbb{R}^{n}\rightarrow\mathbb{R}^{m}$（即$\vec{g}$是$\mathbb{R}^{m}$-值函数）的连续化推广，其分量$g(y)[f]$本身也是泛函。利用以上的推广，也可以写出泛函$F[f]$在$f=0$处的Taylor展开（这里的$0$含义是恒零函数）：<script type="math/tex; mode=display">\begin{align} F[f] = F[0] + \int \frac{\delta F[f]}{\delta f(x_1)}\Bigg\vert_{f=0}f(x_1)\text{d}x_1 + \frac{1}{2} \int\frac{\delta^2 F[f]}{\delta f(x_2) \delta f(x_1)}\Bigg\vert_{f=0}f(x_1)f(x_2)\text{d}x_{1}\text{d}x_2 + \cdots \end{align}</script>其中的二重泛函微商是二重偏微分的推广，由定义可得<script type="math/tex; mode=display">\begin{align} \frac{\delta^2 F[f]}{\delta f(x_2) \delta f(x_1)} &\equiv \frac{\delta}{\delta f(x_2)}\Big(\frac{\delta F[f]}{\delta f(x_1)}\Big) = \frac{\delta}{\delta f(x_2)}\Big(\lim_{\epsilon_1\rightarrow 0}\frac{1}{\epsilon_1}(F[f+\epsilon_1\delta_{x_1}]-F[f])\Big) \\ &= \lim_{\epsilon_2\rightarrow 0}\frac{1}{\epsilon_2}\Big[\lim_{\epsilon_1\rightarrow 0}\frac{1}{\epsilon_1}(F[f+\epsilon_2\delta_{x_2}+\epsilon_1\delta_{x_1}]-F[f+\epsilon_2\delta_{x_2}]) - \lim_{\epsilon_1\rightarrow 0}\frac{1}{\epsilon_1}(F[f+\epsilon_1\delta_{x_1}]-F[f]) \Big] \\ &= \lim_{\epsilon_{1,2}\rightarrow 0}\frac{1}{\epsilon_1\epsilon_2}(F[f+\epsilon_1\delta_{x_1}+\epsilon_2\delta_{x_2}] - F[f+\epsilon_1\delta_{x_1}] - F[f+\epsilon_2\delta_{x_2}] + F[f])\end{align}</script></li></ul><h5 id="场论的Euler-Lagrange方程"><a href="#场论的Euler-Lagrange方程" class="headerlink" title="场论的Euler-Lagrange方程"></a>场论的Euler-Lagrange方程</h5><ul><li>场论中的作用量泛函通常为<script type="math/tex">\begin{align} S[\phi] = \int_{M} \mathcal{L}(\phi^{i},\partial_{\mu}\phi^{i}) \text{d}^{m}x \end{align}</script>，这里我们设基流形$M$由$m$维坐标矢量$\mathbb{x} = {\{x_{\mu}\}}$参数化（通常实际应用中$m=d+1$，$\mathbb{x} = (x_0,x_1,\cdots,x_d)$包含一个类时分量$x_0 = t$和$d$个类空分量$x_k, k=1,\cdots,d$）。通常假设场流形拥有$n$维，场的<strong>坐标</strong>$\phi=\{\phi^{i}\}, i=1,\cdots,n$。$S[\phi]$的全部(局域)信息都储存在$\mathcal{L}$函数中，然而一般的泛函不具有这样的性质。由于这样的性质，$S$的泛函微商和$\mathcal{L}$的普通导数的关系：<script type="math/tex; mode=display">\begin{align} S[\phi+\epsilon\theta] -S[\phi] &= \int_{M} [\mathcal{L}(\phi+\epsilon\theta, \partial_{\mu}\phi+\epsilon\partial_{\mu}\theta) - \mathcal{L}(\phi, \partial_{\mu}\phi)]\text{d}^{m}\mathbb{x} \\ &= \int_{M} \epsilon\Big[\frac{\partial\mathcal{L}}{\partial\phi^{i}}\theta^{i} + \frac{\partial\mathcal{L}}{\partial(\partial_{\mu}\phi^{i})}\partial_{\mu}\theta^{i} \Big]\text{d}^{m}\mathbb{x} + \mathcal{O}(\epsilon^2) \\ &= \int_{M} \epsilon\Big[\frac{\partial\mathcal{L}}{\partial\phi^{i}} - \partial_{\mu}\frac{\partial\mathcal{L}}{\partial(\partial_{\mu}\phi^{i})} \Big]\theta^{i}\text{d}^{m}\mathbb{x} + \mathcal{O}(\epsilon^2) \end{align}</script>这里已经假设基流形在边界处的场变分为$0$，即$\theta\vert_{\partial M} = 0$。对比泛函微商的定义，得到：<script type="math/tex; mode=display">\begin{align} \frac{\delta S[\phi]}{\delta\phi^{i}(\mathbb{x})} = \frac{\partial\mathcal{L}}{\partial\phi^{i}(\mathbb{x})} - \partial_{\mu}\frac{\partial\mathcal{L}}{\partial(\partial_{\mu}\phi^{i}(\mathbb{x}))} \end{align}</script>因此，<strong>泛函$S[\phi]$的稳定点</strong>等价于以下条件（称为<strong>场论的Euler-Lagrange方程</strong>）：<script type="math/tex; mode=display">\begin{align} \forall \mathbb{x},i : \frac{\partial\mathcal{L}}{\partial\phi^{i}(\mathbb{x})} - \partial_{\mu}\frac{\partial\mathcal{L}}{\partial(\partial_{\mu}\phi^{i}(\mathbb{x}))} = 0 \end{align}</script>(i) $d=0, x_0 = t$：$n$维空间点粒子的运动方程（$\phi(t) = \vec{r}(t)$）所对应的Euler-Lagrange方程<script type="math/tex">\begin{align}\frac{\partial\mathcal{L}}{\partial\vec{r}(t)} - \frac{\text{d}}{\text{d}t}\Big(\frac{\partial\mathcal{L}}{\partial\dot{\vec{r}}(t)}\Big) = 0\end{align}</script>。<br>(ii) $d = 1, (x_0, x_1) = (t, x)$：$n$维空间的一维质点链位移的$\phi$的Euler-Lagrange方程<script type="math/tex">\begin{align}\frac{\partial\mathcal{L}}{\partial\phi(t,x)} - \frac{\partial}{\partial t}\Big(\frac{\partial\mathcal{L}}{\partial\dot{\phi}(t,x)}\Big) - \frac{\partial}{\partial x}\Big(\frac{\partial\mathcal{L}}{\partial_{x}\phi(t,x)}\Big) = 0\end{align}</script>。</li></ul><h5 id="正则动量与Legendre变换"><a href="#正则动量与Legendre变换" class="headerlink" title="正则动量与Legendre变换"></a>正则动量与Legendre变换</h5><ul><li>在哈密顿形式下，我们通过$\mathcal{L}$定义关于$\phi$（在场点$\mathbb{x}$处）的正则动量$\pi^{i}$【注意与圆周率$\pi$的区分】<script type="math/tex; mode=display">\begin{align} \pi^{i}(x_{k};k=1,\cdots,d)\equiv\frac{\partial\mathcal{L}(\phi^{i},\partial_{k}\phi^{i}; i=1,\cdots,n)}{\partial\dot{\phi^{i}}(x_{k};k=1,\cdots,d)} \end{align}</script></li><li><p>由Legendre变换得到哈密顿密度$\mathcal{H}$:</p><script type="math/tex; mode=display">\begin{align} \mathcal{H}(\phi^{i},\partial_{k}\phi^{i},\pi^{i}) = \big(\pi\dot{\phi}-\mathcal{L}(\phi,\partial_{k}\phi,\dot{\phi})\big)\Big\vert_{\dot{\phi}=\dot{\phi}(\phi,\pi)} \end{align}</script><blockquote><p>这里上下标比较多，统一整理：$i=1,\cdots,n（标记场流形坐标自由度）$； $m=d+1$；$\mu=0,1,\cdots,d（标记基流形时空维度）$；$k=1,\cdots,d（标记基流形类空维度）$。</p><p>下面「模型一」中的$I=1,\cdots,N\rightarrow\infty（标记场流形点自由度）$这里已经被连续化，因此这里不再出现。</p></blockquote></li></ul><h4 id="【补充1】"><a href="#【补充1】" class="headerlink" title="【补充1】"></a>【补充1】</h4><ul><li><strong>场</strong>是一个由给定流形（基流形$M$）向目标流形（场流形$T$）的光滑映射<script type="math/tex; mode=display">\begin{align} \phi:\qquad M \quad &\rightarrow \quad T \\ z \quad &\mapsto \quad \phi(z) \end{align}</script>凝聚态领域中，最广泛的应用形式是$M (\subset \mathcal{R}\times\mathcal{T}) \rightarrow T$，$M$为时空区间乘积，$T$是一个类空(?)流形。</li><li>在应用场论中，场不是作为最终结果，而是泛函的输入，泛函也是一种映射$S: \phi\mapsto S[\phi] \in \mathbb{R}$。$S[\phi]$决定了一个场论。凝聚态场论通常是离散映射的极限，有时候考虑离散图景是很有帮助的，这时泛函就化为了有限维微积分。</li></ul><h4 id="【补充2】"><a href="#【补充2】" class="headerlink" title="【补充2】"></a>【补充2】</h4><ul><li><strong>Lorentz不变性</strong>的含义是：对于给定的(逆变)$4$-矢量$X_{\mu}$，若线性坐标变换$X_{\mu} \rightarrow X_{\mu}’ \equiv T_{\mu\nu}X_{\nu}$使度规$g=\{g^{\mu\nu}\}=\text{diag}\{1,-1,-1,-1\}$保持不变（$T^{T}gT=g$），则称这个线性变换是一个Lorentz变换。协变矢量$X^{\mu} = g^{\mu\nu}X_{\nu}$，Lorentz不变性表示为：$X^{\mu}X_{\mu} = X’^{\mu}X’_{\mu}$，其中等号左右两端表示坐标变换前后。</li></ul><h2 id="模型一：经典谐振子链：声子"><a href="#模型一：经典谐振子链：声子" class="headerlink" title="模型一：经典谐振子链：声子"></a>模型一：经典谐振子链：声子</h2><h3 id="研究对象：离子核的动力学"><a href="#研究对象：离子核的动力学" class="headerlink" title="研究对象：离子核的动力学"></a>研究对象：离子核的动力学</h3><h3 id="模型限制："><a href="#模型限制：" class="headerlink" title="模型限制："></a>模型限制：</h3><ul><li>经典力学范畴（忽略量子效应）</li><li>$\text{dim}= 1 + 1$，$N \gg 1$</li><li>离子间距（晶格常数）$a$，$|R_{I}(t)-\bar{R}_{I}| \ll a$</li><li>$H_{\text{e}}= H_{\text{ei}} = 0$</li></ul><h3 id="模型讨论："><a href="#模型讨论：" class="headerlink" title="模型讨论："></a>模型讨论：</h3><ul><li><p>零温下，所有离子排成一列，坐标为$R_{I} \equiv \bar{R_{I}} = Ia$，$R_{I}$是坐标变量，此时恰恒等于它的平衡态位置坐标$\bar{R_{I}}$。</p></li><li><p>极低温下，势能$V_{\text{ii}}$近似为二次形式（微振动），哈密顿量变成（$k_s$是劲度系数）</p><script type="math/tex; mode=display">\begin{align} H = H_{\text{ii}} = \sum_{I=1}^{N}\Big[\frac{P_{I}^{2}}{2M} + \frac{k_s}{2}(R_{I+1} - R_{I} -a)^{2}\Big] \end{align}</script><p>这时的哈密顿量实际上描述$N$个由弹簧弹性连接的质点。在这个体系中$(R,\dot{R}) \equiv \{R_{I},\dot{R}_{I}\}$，拉格朗日量为</p><script type="math/tex; mode=display">\begin{align} L = T - U = \sum_{I=1}^{N}\Big[\frac{M\dot{R}^{2}_{I}}{2} - \frac{k_s}{2}(R_{I+1} - R_{I} -a)^{2} \Big] \end{align}</script><p>我们感兴趣的是$N \gg 1$的多体系统，因此可以<strong>忽略边界条件</strong>，或者<strong>考虑周期性边界条件</strong>（这等价于原子链变成一个大的“环”）。考虑到此时晶格振动很弱（<strong>长程序保持</strong>），因此模型中离子偏移平衡态位置很小（$|R_{I}(t)-\bar{R}_{I}| \ll a$）的假设是合理的。晶体的完整性也被保持。</p><p>记$\phi_{I}(t) = R_{I}(t)-\bar{R}_{I}, (周期性边界条件：\phi_{N+1}=\phi_1)$，</p><script type="math/tex; mode=display">\begin{align} L = \sum_{I=1}^{N}\Big[\frac{M}{2}\dot{\phi}^{2}_{I} - \frac{k_s}{2}(\phi_{I+1} - \phi_{I})^{2} \Big] \end{align}</script></li><li><p>通常，由于我们研究的尺度相比原子尺度来讲是宏观的，我们可以对离散晶格模型取<strong>连续极限</strong>，也就是用有效的连续自由度来描述体系。连续的系统一般更容易形式化，比如可以方便做Taylor展开。</p><p>在目前的谐振子链模型中，由于我们已经假设了条件$|\phi_{I}(t)| \ll a$，现在（取连续极限）引入连续自由度$\phi(x,t)$（量纲为$[L]^{\frac{1}{2}}$）：</p><script type="math/tex; mode=display">\begin{align} \phi_{I}(t) \rightarrow a^{\frac{1}{2}}\phi(x,t)\Big|_{x=Ia}, \quad \phi_{I+1}(t) - \phi_{I}(t) \rightarrow a^{\frac{3}{2}}\partial_{x}\phi(x,t)\Big|_{x=Ia}, \quad \sum_{I=1}^{N} \rightarrow \frac{1}{a}\int_{0}^{l \equiv Na}\text{d}x \end{align}</script><p>拉格朗日量化为（$\phi \equiv \phi(x,t)$，$m \equiv M$，拉格朗日量密度记为$\mathcal{L}\sim[E]\cdot[L]^{-1}$）：</p><script type="math/tex; mode=display">\begin{align} L[\phi] =\int_{0}^{l}\mathcal{L}(\phi,\partial_{x}\phi,\dot{\phi})\text{d}x ,\quad \mathcal{L}(\phi,\partial_{x}\phi,\dot{\phi}) = \frac{m}{2}\dot{\phi}^{2} - \frac{k_{s}a^{2}}{2}(\partial_{x}\phi)^{2} \end{align}</script><p>经典作用量为：</p><script type="math/tex; mode=display">\begin{align} S[\phi] = \int L[\phi]\text{d}t = \int\text{d}t \int_{0}^{l}\mathcal{L}(\phi,\partial_{x}\phi,\dot{\phi})\text{d}x \end{align}</script><p>至此我们抛弃了$N$点粒子描述，而改用了一个有连续自由度的<strong>(经典)场</strong>，此时的拉格朗日量和作用量都是$\phi$的泛函。用几何的语言来讲，$\phi$的基流形$M = [0,L]\times[0,t]\subset\mathbb{R}^{2}$（时空区间乘积），场流形$T = \mathbb{R}$。</p></li><li><p>由于<script type="math/tex">\begin{align} \frac{\partial\mathcal{L}}{\partial\phi(t,x)} = 0, \frac{\partial}{\partial t}\Big(\frac{\partial\mathcal{L}}{\partial\dot{\phi}(t,x)}\Big) = m\ddot{\phi}^{2}, \frac{\partial}{\partial x}\Big(\frac{\partial\mathcal{L}}{\partial_{x}\phi(t,x)}\Big) = -k_{s}a^{2}\partial^{2}_{x}\phi \end{align}</script>，一维质点链的运动方程为：</p><script type="math/tex; mode=display">\begin{align} (m\partial_{t}^{2} - k_{s}a^{2}\partial_{x}^{2})\phi = 0 \end{align}</script><p>这是一个<strong>波动方程</strong>，行波解的一般形式为$\phi_{+}(x-vt)+\phi_{-}(x+vt)$，其中$v=a\sqrt{k_s/m}$，$\phi_{\pm}$是具有所给出形式（向前或向后传播）的任意光滑函数。由此推出此模型的基本低能<strong>元激发</strong>是晶格振动以<strong>声波</strong>的形式传播。</p></li><li><p>模型性质：（平凡的）<strong>无耗散、无色散</strong>。考虑加上这些改进就可以给出一般的晶格振动的经典场论。是一种集体激发（元激发包含了大量的微观自由度）。</p><blockquote><p>注意：不是所有的凝聚态体系的激发模式都是集体激发，例如相互作用电子气就是与原始微观系统$1：1$对应的微观激发——带电准粒子，而相应的集体激发模式是长波的等离激元。</p></blockquote></li><li><p>一维谐振子链动力学的哈密顿形式</p><ul><li>正则动量：<script type="math/tex">\begin{align} \pi(x,t)\equiv\frac{\partial\mathcal{L}(\phi,\partial_{x}\phi,\dot{\phi})}{\partial\dot{\phi}(x,t)}=m\dot{\phi}(x,t) \end{align}</script></li><li>哈密顿量密度：<script type="math/tex">\begin{align} \mathcal{H}(\phi,\partial_{x}\phi,\pi) = \big(\pi\dot{\phi}-\mathcal{L}(\phi,\partial_{x}\phi,\dot{\phi})\big)\big\vert_{\dot{\phi}=\dot{\phi}(\phi,\pi)} = m\dot{\phi}^{2} - \big(\frac{m}{2}\dot{\phi}^{2} - \frac{k_{s}a^{2}}{2}(\partial_{x}\phi)^{2}\big) = \frac{\pi^2}{2m} + \frac{k_{s}a^{2}}{2}(\partial_{x}\phi)^{2} \end{align}</script></li><li>哈密顿量：<script type="math/tex">\begin{align} H[\pi,\phi] = \int_{0}^{l}\mathcal{H}(\phi,\partial_{x}\phi,\pi)\text{d}x =  \int\Big(\frac{\pi^2}{2m} + \frac{k_{s}a^{2}}{2}(\partial_{x}\phi)^{2}\Big)\text{d}x \end{align}</script></li></ul></li><li><p>取一个特解$\phi(x,t)=\phi_{+}(x-vt)$为例，则$\pi(x,t)=-mv\partial_{x}\phi_{+}(x-vt)$，从而</p><script type="math/tex; mode=display">\begin{align} H[\pi,\phi] = (\frac{1}{2}mv^2 +\frac{1}{2}k_{s}a^2)\int_{0}^{l}[\partial_{x}\phi_{+}(x-vt)]^2 \text{d}x = k_{s}a^2 \int_{0}^{l}[\partial_{x}\phi_{+}(x)]^2 \text{d}x \end{align}</script><p>我们看到哈密顿量是正定的、不含时的。注意到，当我们取无穷小的激发极限$\partial_{x}\phi_{+}\rightarrow0$，能量消失了，这体现了体系的对称性，即当所有离子同时平移时哈密顿量不变（对应离散情形$\phi_{I} \rightarrow \phi_{I} + \delta,  \delta=const.$），整体的平移不改变体系的内能。体系的基态$R_{I}=Ia\Rightarrow\phi_{I}=0$，我们说平移对称性是<strong>自发破缺</strong>的（即固体必须决定自己向哪个方向静止）。对称性的自发破缺不意味着对称性消失，相反，从预置的基态发生无限波长偏移已经接近全局(宏观上固体的很大一部分)平移，使得消耗的能量几乎为$0$。</p></li><li><p>从微观简谐哈密顿量出发，我们可以推导<strong>比热</strong>。热力学能量密度（内能密度）：</p><p><script type="math/tex">\begin{align} u = \frac{1}{l}\frac{\int e^{-\beta H}H\text{d}\Gamma}{\int e^{-\beta H}\text{d}\Gamma} = -\frac{1}{l}\partial_{\beta}\ln{\int e^{-\beta H}\text{d}\Gamma} = -\frac{1}{l}\partial_{\beta}\ln{\mathcal{Z}} \end{align}</script>，其中$\beta=(\frac{1}{k_{B}T}=)\frac{1}{T}$，$\mathcal{Z}\equiv\int e^{-\beta H}\text{d}\Gamma$是Boltzmann配分函数，$\text{d}\Gamma=\prod_{I=1}^{N}\text{d}R_{I}\text{d}P_{I}$是相空间体积元。从而比热为$c\equiv\partial_{T}u$。</p><p>对积分变量做尺度变换：$R_{I}\rightarrow\beta^{-1/2}X_{I}, P_{I}\rightarrow\beta^{-1/2}Y_{I}$，指数$\beta H(R,P)\rightarrow H(X,Y)$现在与温度无关了（因为$H(R,P)$对$R$和$P$的依赖都是二次的），积分测度相应变换为$\text{d}\Gamma\rightarrow\beta^{-N}\prod_{I=1}^{N}\text{d}X_{I}\text{d}Y_{I}\equiv\beta^{-N}\text{d}\Gamma’$。记$\rho\equiv N/l$表示原子密度（1维体积为$l$），$K\equiv\int e^{-H(X,Y)}\text{d}\Gamma’$（也与温度无关）。能量密度化为：</p><p><script type="math/tex">\begin{align} u = -\frac{1}{l}\partial_{\beta}\ln{(\beta^{-N}K)} = -\frac{1}{l}\frac{-N\beta^{-N-1}K}{\beta^{-N}K} = \frac{N}{l\beta} = \rho T \end{align}</script>，</p><p>于是比热$c=\rho$，与材料性质参数$M,k_{s}$无关，与$N$自由度<strong>能量均分定理</strong>的结果一致（$U=NT$）。由于我们现在讨论的是“经典”谐振子链模型，因而没有涉及任何的量子效应，故在低温下与实验结果是不符的。</p></li></ul><h2 id="模型二：自由传播的电磁波"><a href="#模型二：自由传播的电磁波" class="headerlink" title="模型二：自由传播的电磁波"></a>模型二：自由传播的电磁波</h2><h3 id="研究对象：真空电动力学"><a href="#研究对象：真空电动力学" class="headerlink" title="研究对象：真空电动力学"></a>研究对象：真空电动力学</h3><h3 id="模型限制：-1"><a href="#模型限制：-1" class="headerlink" title="模型限制："></a>模型限制：</h3><ul><li>经典电动力学范畴（忽略量子效应）</li><li>$\text{dim}= 3 + 1$，连续场</li><li>非均匀，真空（$\vec{E} = \vec{D}, \vec{B} = \vec{H}$）</li><li></li></ul><h3 id="模型讨论：-1"><a href="#模型讨论：-1" class="headerlink" title="模型讨论："></a>模型讨论：</h3><ul><li><p>这里我们倒着来看看从作用量出发的理论构建情况。</p></li><li><p>Maxwell方程组：</p><script type="math/tex; mode=display">\begin{align} 非均匀方程(由变分原理得到的运动方程)：&\quad \nabla\cdot\vec{E} = \rho, \quad \nabla\times\vec{B} - \partial_{t}\vec{E} = \vec{j}, \\ 均匀方程(对\vec{E}和\vec{B}的第一性原理的约束)： &\quad \nabla\times\vec{E} + \partial_{t}\vec{B} = \vec{0}, \quad \nabla\cdot\vec{B} = \vec{0}, \end{align}</script></li><li><p>电磁4-势$A_{\mu} = (\phi,-\vec{A})$，场在规范变换$A_{\mu} \rightarrow A_{\mu} + \partial_{\mu}\Gamma$保持不变，其中$\Gamma$是任意函数。$\vec{E}$和$\vec{B}$被$A_{\mu}$唯一决定：$\vec{E} = -\nabla\phi-\partial_{t}\vec{A}$，$\vec{B} = \nabla\times\vec{A}$。</p></li><li><p>电磁场张量$F_{\mu\nu} = \partial_{\mu}A_{\nu} - \partial_{\nu}A_{\mu}$（反对称，也称电磁张量），其中$x_{\mu} = (t,-\vec{x})$并且$\partial_{\mu} = (\partial_{t},\nabla)$。</p><script type="math/tex; mode=display">F = \{F_{\mu\nu}\} = \begin{bmatrix} 0 & E_1 & E_2 & E_3 \\ -E_1 & 0 & -B_3 & B_2 \\ -E_2 & B_3 & 0 & -B_1 \\ -E_3 & -B_2 & B_1 & 0 \end{bmatrix}</script><p>利用场张量，我们得到第一性原理约束的另一表达形式：$\partial_{\lambda}F_{\mu\nu} + \partial_{\mu}F_{\nu\lambda} + \partial_{\nu}F_{\lambda\mu} = 0$</p></li><li><p>构建作用量$S[A]$：</p><ul><li><p>方案一：认为Maxwell方程组是基本的，试图通过变分原理从作用量给出Maxwell方程组。</p></li><li><p>方案二：从对称性出发。电磁理论需要满足<strong>Lorentz不变性</strong>、<strong>规范不变性</strong>、形式简单的基本假设。最高至$A$的二阶(微分)项的选择为：</p><script type="math/tex; mode=display">\begin{align} S[A] = \int (c_1 F_{\mu\nu} F^{\mu\nu} + c_2 A_{\mu}j^{\mu}) \text{d}^{4}x,\end{align}</script><p>其中$\text{d}^{4}x = \prod_{\mu}\text{d}x_{\mu} = \text{d}t\text{d}x_1\text{d}x_2\text{d}x_3$</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 凝聚态场论 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质的间接探测项目都有哪些？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E9%97%B4%E6%8E%A5%E6%8E%A2%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E9%97%B4%E6%8E%A5%E6%8E%A2%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质的直接探测项目都有哪些？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%8E%A2%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E7%9B%B4%E6%8E%A5%E6%8E%A2%E6%B5%8B%E9%A1%B9%E7%9B%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质的可能候选者是怎样分类的？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%8F%AF%E8%83%BD%E5%80%99%E9%80%89%E8%80%85%E6%98%AF%E6%80%8E%E6%A0%B7%E5%88%86%E7%B1%BB%E7%9A%84%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%8F%AF%E8%83%BD%E5%80%99%E9%80%89%E8%80%85%E6%98%AF%E6%80%8E%E6%A0%B7%E5%88%86%E7%B1%BB%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】银河系内的暗物质的整体运动形式是怎样的？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E9%93%B6%E6%B2%B3%E7%B3%BB%E5%86%85%E7%9A%84%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E6%95%B4%E4%BD%93%E8%BF%90%E5%8A%A8%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E9%93%B6%E6%B2%B3%E7%B3%BB%E5%86%85%E7%9A%84%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E6%95%B4%E4%BD%93%E8%BF%90%E5%8A%A8%E5%BD%A2%E5%BC%8F%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】如何确定暗物质的太阳系邻域速度分布？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%A4%AA%E9%98%B3%E7%B3%BB%E9%82%BB%E5%9F%9F%E9%80%9F%E5%BA%A6%E5%88%86%E5%B8%83%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%A4%AA%E9%98%B3%E7%B3%BB%E9%82%BB%E5%9F%9F%E9%80%9F%E5%BA%A6%E5%88%86%E5%B8%83%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】如何确定暗物质的太阳系邻域密度？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%A4%AA%E9%98%B3%E7%B3%BB%E9%82%BB%E5%9F%9F%E5%AF%86%E5%BA%A6%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E5%A4%AA%E9%98%B3%E7%B3%BB%E9%82%BB%E5%9F%9F%E5%AF%86%E5%BA%A6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】我们在地球上如何确定哪些事件源自暗物质？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%88%91%E4%BB%AC%E5%9C%A8%E5%9C%B0%E7%90%83%E4%B8%8A%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E5%93%AA%E4%BA%9B%E4%BA%8B%E4%BB%B6%E6%BA%90%E8%87%AA%E6%9A%97%E7%89%A9%E8%B4%A8%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%88%91%E4%BB%AC%E5%9C%A8%E5%9C%B0%E7%90%83%E4%B8%8A%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E5%93%AA%E4%BA%9B%E4%BA%8B%E4%BB%B6%E6%BA%90%E8%87%AA%E6%9A%97%E7%89%A9%E8%B4%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】探测器中的暗物质事例率都与什么因素相关？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%8E%A2%E6%B5%8B%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9A%97%E7%89%A9%E8%B4%A8%E4%BA%8B%E4%BE%8B%E7%8E%87%E9%83%BD%E4%B8%8E%E4%BB%80%E4%B9%88%E5%9B%A0%E7%B4%A0%E7%9B%B8%E5%85%B3%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%8E%A2%E6%B5%8B%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9A%97%E7%89%A9%E8%B4%A8%E4%BA%8B%E4%BE%8B%E7%8E%87%E9%83%BD%E4%B8%8E%E4%BB%80%E4%B9%88%E5%9B%A0%E7%B4%A0%E7%9B%B8%E5%85%B3%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质粒子具有哪些性质？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%B2%92%E5%AD%90%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E6%80%A7%E8%B4%A8%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%B2%92%E5%AD%90%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E6%80%A7%E8%B4%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】如何探测暗物质？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E6%8E%A2%E6%B5%8B%E6%9A%97%E7%89%A9%E8%B4%A8%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E5%A6%82%E4%BD%95%E6%8E%A2%E6%B5%8B%E6%9A%97%E7%89%A9%E8%B4%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】为什么组成暗物质的不是标准模型粒子？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%84%E6%88%90%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E4%B8%8D%E6%98%AF%E6%A0%87%E5%87%86%E6%A8%A1%E5%9E%8B%E7%B2%92%E5%AD%90%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BB%84%E6%88%90%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E4%B8%8D%E6%98%AF%E6%A0%87%E5%87%86%E6%A8%A1%E5%9E%8B%E7%B2%92%E5%AD%90%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质存在的证据都有哪些？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E5%AD%98%E5%9C%A8%E7%9A%84%E8%AF%81%E6%8D%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E5%AD%98%E5%9C%A8%E7%9A%84%E8%AF%81%E6%8D%AE%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【DM】是谁最先提出暗物质的概念？</title>
      <link href="uncategorized/%E3%80%90DM%E3%80%91%E6%98%AF%E8%B0%81%E6%9C%80%E5%85%88%E6%8F%90%E5%87%BA%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%9F/"/>
      <url>uncategorized/%E3%80%90DM%E3%80%91%E6%98%AF%E8%B0%81%E6%9C%80%E5%85%88%E6%8F%90%E5%87%BA%E6%9A%97%E7%89%A9%E8%B4%A8%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Manual】奕声音「计算器」功能使用说明</title>
      <link href="tutorial/%E3%80%90Manual%E3%80%91%E5%A5%95%E5%A3%B0%E9%9F%B3%E3%80%8C%E8%AE%A1%E7%AE%97%E5%99%A8%E3%80%8D%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>tutorial/%E3%80%90Manual%E3%80%91%E5%A5%95%E5%A3%B0%E9%9F%B3%E3%80%8C%E8%AE%A1%E7%AE%97%E5%99%A8%E3%80%8D%E5%8A%9F%E8%83%BD%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>包括“常规计算”和“符号推导”两部分</p></blockquote><a id="more"></a><p>本使用说明以示例为主要内容。</p><p>为了及时返回运算结果（微信官方设置的限制为$5$秒内），请不要使你的表达式超过$90$个字符。</p><h2 id="常规计算"><a href="#常规计算" class="headerlink" title="常规计算"></a>常规计算</h2><p>使用常规计算功能的用户命令格式为<code>c &lt;表达式&gt;</code></p><h3 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h3><h5 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h5><p>示例1：求$1+2-3\times 4 \div 5$。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c <span class="number">1</span>+<span class="number">2</span><span class="number">-3</span>*<span class="number">4</span>/<span class="number">5</span>                        <span class="comment"># 返回 0.6</span></span><br></pre></td></tr></table></figure></p><h5 id="幂次、开方"><a href="#幂次、开方" class="headerlink" title="幂次、开方"></a>幂次、开方</h5><p>示例2：求$3^5$，$\sqrt{81}$。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c <span class="number">3</span>**<span class="number">5</span> 或 c pow(<span class="number">3</span>, <span class="number">5</span>)              <span class="comment"># 返回 243</span></span><br><span class="line">c sqrt(<span class="number">81</span>) 或 c pow(<span class="number">81</span>, <span class="number">0.5</span>)       <span class="comment"># 返回 9.0</span></span><br></pre></td></tr></table></figure></p><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><p>示例3：求矩阵<script type="math/tex">\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}</script>的逆矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c linalg.inv([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]])       <span class="comment"># 返回 [[-2.   1. ] </span></span><br><span class="line">                                   <span class="comment">#       [ 1.5 -0.5]]</span></span><br></pre></td></tr></table></figure></p><p>示例4：求矩阵<script type="math/tex">\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}</script>的转置矩阵。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c transpose([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])         <span class="comment"># 返回 [[1 3]</span></span><br><span class="line">或 c array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]).T        <span class="comment">#       [2 4]]</span></span><br></pre></td></tr></table></figure></p><p>示例5：求矩阵<script type="math/tex">\begin{bmatrix} 1 & 2 \\ 3 & 4 \end{bmatrix}</script>的行列式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c linalg.det([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])        <span class="comment"># 返回 -2.0</span></span><br></pre></td></tr></table></figure></p><h3 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h3><p>示例6：求$\Gamma(5)$，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c gamma(<span class="number">5</span>)                         <span class="comment"># 返回 24.0</span></span><br></pre></td></tr></table></figure></p><p>其他支持的函数列表：</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><h5 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h5><p>示例7：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c max(<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>)                   <span class="comment"># 返回 5</span></span><br><span class="line">c min(<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>)                   <span class="comment"># 返回 1</span></span><br></pre></td></tr></table></figure></p><h5 id="均值、方差"><a href="#均值、方差" class="headerlink" title="均值、方差"></a>均值、方差</h5><p>示例8：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c mean([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])            <span class="comment"># 返回 4.0</span></span><br><span class="line">c std([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])             <span class="comment"># 返回 2.0</span></span><br></pre></td></tr></table></figure></p><h2 id="符号推导"><a href="#符号推导" class="headerlink" title="符号推导"></a>符号推导</h2><p>使用符号推导功能的用户命令格式为<code>c sym &lt;表达式&gt;</code></p><p>特殊符号：</p><ul><li><code>x</code>，<code>y</code>，<code>z</code>，<code>t</code>为可以使用的变元符号</li><li><code>k</code>，<code>m</code>，<code>n</code>为可以使用的整数符号</li><li><code>f</code>，<code>g</code>为可以使用的函数符号</li><li><code>oo</code>表示无穷大$\infty$</li><li><code>E</code>表示自然底数，<code>I</code>表示虚数单位</li><li><code>Eq(lhs,rhs)</code>是一个方程表达式，<code>lhs</code>和<code>rhs</code>分别表示方程等号的左右两边</li></ul><h3 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h3><h5 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h5><p>示例1：求极限</p><p><script type="math/tex">\begin{align}\lim_{x\rightarrow\infty}{(1+\frac{1}{x})^x}\end{align}</script>，</p><p><script type="math/tex">\begin{align}\lim_{x\rightarrow 0^{-}}\frac{1}{x}\end{align}</script>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c sym limit((<span class="number">1</span>+<span class="number">1</span>/x)**x, x, oo)      <span class="comment"># 返回 E</span></span><br><span class="line">c sym limit(<span class="number">1</span>/x, x, <span class="number">0</span>, <span class="string">'-'</span>)         <span class="comment"># 返回 -oo</span></span><br></pre></td></tr></table></figure><h5 id="级数展开"><a href="#级数展开" class="headerlink" title="级数展开"></a>级数展开</h5><p>示例2：写出$\sin{2x}$在$x=0$处的Taylor级数展开（至$x^4$阶，默认是至$x^6$阶）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c sym sin(<span class="number">2</span>*x).series(x)            <span class="comment"># 返回 2*x - 4*x**3/3 + 4*x**5/15 + O(x**6)</span></span><br><span class="line">c sym sin(<span class="number">2</span>*x).series(x,<span class="number">0</span>,<span class="number">4</span>)        <span class="comment"># 返回 2*x - 4*x**3/3 + O(x**4)</span></span><br></pre></td></tr></table></figure></p><p>示例3：写出$e^x$在$x=1$处的级数展开（至$x^3$阶）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c sym exp(x).series(x,<span class="number">1</span>,<span class="number">3</span>)          <span class="comment"># 返回 E + E*(x-1) + E*(x-1)**2/2 + O((x-1)**3, (x,1))</span></span><br><span class="line">c sym exp(x).series(x,<span class="number">1</span>,<span class="number">3</span>).removeO()  <span class="comment"># 返回 E + E*(x-1) + E*(x-1)**2/2</span></span><br></pre></td></tr></table></figure></p><h5 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h5><p>示例4：求函数$f(x) = e^{-x^2}$的导函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym diff(exp(-x**<span class="number">2</span>))              <span class="comment"># 返回 -2*x*exp(-x**2)</span></span><br></pre></td></tr></table></figure></p><h5 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h5><p>示例5：求不定积分<script type="math/tex">\begin{align} \int\frac{\text{d}x}{1+x^2} \end{align}</script>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym integrate(<span class="number">1</span>/(<span class="number">1</span>+x**<span class="number">2</span>))         <span class="comment"># 返回 atan(x)</span></span><br></pre></td></tr></table></figure></p><h5 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h5><p>示例6：求二重定积分<script type="math/tex">\begin{align} \int_{-\infty}^{\infty}\text{d}x\int_{-\infty}^{\infty} e^{-x^2-y^2} \text{d}y \end{align}</script>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym integrate(exp(-x**<span class="number">2</span>-y**<span class="number">2</span>), (x,-oo,oo), (y,-oo,oo))  <span class="comment"># 返回 pi</span></span><br></pre></td></tr></table></figure></p><h3 id="解方程-组"><a href="#解方程-组" class="headerlink" title="解方程(组)"></a>解方程(组)</h3><h5 id="代数方程"><a href="#代数方程" class="headerlink" title="代数方程"></a>代数方程</h5><p>示例7：求方程$x^2 = 1$的解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym solve(Eq(x**<span class="number">2</span>, <span class="number">1</span>), x)          <span class="comment"># 返回 [-1， 1]</span></span><br></pre></td></tr></table></figure></p><p>示例8：求二元一次方程组<script type="math/tex">\begin{cases} x+y = 1 \\ x-y = 3 \end{cases}</script>的解。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym solve([x+y<span class="number">-1</span>, x-y<span class="number">-3</span>], [x, y])  <span class="comment"># 返回 &#123;x: 2, y: -1&#125;</span></span><br></pre></td></tr></table></figure></p><h5 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h5><p>示例9：求解微分方程（ODE）$f’’(x) - 2f’(x) + f(x) = \sin{x}$。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c sym dsolve(Eq(f(x).diff(x, x) - <span class="number">2</span>*f(x).diff(x) + f(x), sin(x)), f(x))  <span class="comment"># 返回 Eq(f(x), (C1 + C2*x)*exp(x) + cos(x)/2)</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公众号 </tag>
            
            <tag> 计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>I want to learn</title>
      <link href="uncategorized/I-want-to-learn/"/>
      <url>uncategorized/I-want-to-learn/</url>
      
        <content type="html"><![CDATA[<blockquote><p>拓展技能树</p></blockquote><a id="more"></a><ul><li>[ ] PHP</li><li>[ ]  Vue.js</li><li>[ ]  数电模电</li><li>[x]  PyQt5 </li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Math】泛函微分</title>
      <link href="academic/%E3%80%90Math%E3%80%91%E6%B3%9B%E5%87%BD%E5%BE%AE%E5%88%86/"/>
      <url>academic/%E3%80%90Math%E3%80%91%E6%B3%9B%E5%87%BD%E5%BE%AE%E5%88%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>凝聚态场论数学基础</p></blockquote><a id="more"></a><p>泛函的宗量是函数。与函数的研究类似，我们在研究泛函时也是对泛函的(微小)变化时的行为、泛函驻点感兴趣。泛函的驻点的含义是：在变换$f \rightarrow f+h$下（$h$是无穷小增量函数），泛函保持不变。一个泛函$F$称为可微的，若</p><script type="math/tex; mode=display">\begin{align} F[f + \varepsilon g] - F[f] = \varepsilon\cdot \text{D}F_{f}[g] + \mathcal{O}(\varepsilon^2) \end{align}</script><p>其中，<strong>$\text{D}F_{f}$是线性泛函</strong>（满足$\text{D}F_{f}[g_{1}+g_{2}] = \text{D}F_{f}[g_{1}] + \text{D}F_{f}[g_{2}]$），$\varepsilon$是无穷小参数，$g$是任意函数。<strong>定义泛函$F$的驻点在$f$，当且仅当$\text{D}F_{f} = 0$。</strong></p><p>为了更好地理解泛函$F[f]$的总量$f$，将它视为$N$维矢量$\vec{f}=\{f_{n} \equiv f(x_{n}), n=1,\cdots,N\}$在$N\rightarrow\infty$的极限（$x_n$是一组线性无关矢量，或一组<strong>基</strong>）。于是$F(\vec{f})$是一个定义在$N$维空间上的函数，在连续极限下，$\vec{f}\rightarrow f$演变为函数，同时$F(\vec{f})\rightarrow F[f]$演变为泛函。下表对于离散和取连续极限两种情形作了一个对比总结：</p><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">离散情形</th><th style="text-align:center">连续极限（$N\rightarrow\infty$）情形</th></tr></thead><tbody><tr><td style="text-align:center">空间维数</td><td style="text-align:center">有限$N$维</td><td style="text-align:center">无限维</td></tr><tr><td style="text-align:center">单位基</td><td style="text-align:center">$\vec{e}_{n}$，只有第$n$分量为$1$，其余为0</td><td style="text-align:center">$\delta_{x}$，其中$\delta_{x}(x’) \equiv \delta(x-x’)$</td></tr><tr><td style="text-align:center">内积</td><td style="text-align:center"><script type="math/tex">\begin{align}\langle \vec{f},\vec{g} \rangle \equiv \sum_{n=1}^{N} f_{n} g_{n}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align}\langle f, g \rangle \equiv \int f(x) g(x)\text{d}x\end{align}</script></td></tr><tr><td style="text-align:center">宗量</td><td style="text-align:center">$\vec{f} = \{f_{n} \equiv f(x_{n}), n=1,\cdots,N\}$</td><td style="text-align:center">$f$</td></tr><tr><td style="text-align:center">宗量投影分量</td><td style="text-align:center"><script type="math/tex">\begin{align}f_{n} = \langle \vec{f},\vec{e}_n \rangle = \sum_{m=1}^{N}f_{m}(\vec{e}_{n})_{m}\end{align}</script>，$(\vec{e}_{n})_{m} = \delta_{nm}$</td><td style="text-align:center"><script type="math/tex">\begin{align}f(x) = \langle f, \delta_x \rangle = \int f(x')\delta_{x}(x')\text{d}x'\end{align}</script></td></tr><tr><td style="text-align:center">函子</td><td style="text-align:center">$F(\vec{f})$</td><td style="text-align:center">$F[f]$</td></tr><tr><td style="text-align:center">偏微分</td><td style="text-align:center"><script type="math/tex">\begin{align}\partial_{f_n}F(\vec{f}) \equiv \lim_{\varepsilon\rightarrow 0} \frac{F(\vec{f}+\varepsilon\vec{e}_{n}) - F(\vec{f})}{\varepsilon}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \frac{\delta F[f]}{\delta f(x)} \equiv \lim_{\varepsilon\rightarrow 0}\frac{F[f+\varepsilon\delta_{x}] - F[f]}{\varepsilon} \end{align}</script></td></tr><tr><td style="text-align:center">全微分</td><td style="text-align:center"><script type="math/tex">\begin{align}\text{d}F_{\vec{f}}(\vec{g}) \equiv \langle\nabla F_{\vec{f}},\vec{g} \rangle = \sum_{n=1}^{N} \partial_{f_{n}}F(\vec{f})g_{n}\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \text{D}F_{f}[g] = \int \frac{\delta F[f]}{\delta f(x)}g(x) \text{d}x \end{align}</script></td></tr><tr><td style="text-align:center">(变)微分</td><td style="text-align:center"><script type="math/tex">\begin{align}F(\vec{f}+\varepsilon\vec{g})-F(\vec{f}) = \varepsilon\cdot\text{d}F_{\vec{f}}(\vec{g}) + \mathcal{O}(\varepsilon^2)\end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align}F[f + \varepsilon g] - F[f] = \varepsilon\cdot \text{D}F_{f}[g] + \mathcal{O}(\varepsilon^2)\end{align}</script></td></tr><tr><td style="text-align:center">链式法则</td><td style="text-align:center"><script type="math/tex">\begin{align} \partial_{f_n}F(\vec{g}(\vec{f})) = \sum_{m=1}^{N}\partial_{g_m}F(\vec{g})\Big\vert_{\vec{g}=\vec{g}(\vec{f})}\partial_{f_n}g_{m}(f_m) \end{align}</script></td><td style="text-align:center"><script type="math/tex">\begin{align} \frac{\delta F[g[f]]}{\delta f(x)} = \int \frac{\delta F[g]}{\delta g(y)}\Bigg\vert_{g=g[f]}\frac{\delta g(y)[f]}{\delta f(x)} \text{d}y \end{align}</script></td></tr></tbody></table></div><p>这里的记号$g[f]$是一个对$\vec{g}:\mathbb{R}^{n}\rightarrow\mathbb{R}^{m}$（即$\vec{g}$是$\mathbb{R}^{m}$-值函数）的连续化推广，其分量$g(y)[f]$本身也是泛函。利用以上的推广，也可以写出泛函$F[f]$在$f=0$处的Taylor展开（这里的$0$含义是恒零函数）：</p><script type="math/tex; mode=display">\begin{align} F[f] = F[0] + \int \frac{\delta F[f]}{\delta f(x_1)}\Big|_{f=0}f(x_1)\text{d}x_1 + \frac{1}{2} \int\frac{\delta^2 F[f]}{\delta f(x_2) \delta f(x_1)}\Big|_{f=0}f(x_1)f(x_2)\text{d}x_{1}\text{d}x_2 + \cdots \end{align}</script><p>其中的二重泛函微商是二重偏微分的推广，由定义可得</p><script type="math/tex; mode=display">\begin{align} \frac{\delta^2 F[f]}{\delta f(x_2) \delta f(x_1)} &\equiv \frac{\delta}{\delta f(x_2)}\Big(\frac{\delta F[f]}{\delta f(x_1)}\Big) = \frac{\delta}{\delta f(x_2)}\Big(\lim_{\varepsilon_1\rightarrow 0}\frac{1}{\varepsilon_1}(F[f+\varepsilon_1\delta_{x_1}]-F[f])\Big) \\ &= \lim_{\varepsilon_2\rightarrow 0}\frac{1}{\varepsilon_2}\Big[\lim_{\varepsilon_1\rightarrow 0}\frac{1}{\varepsilon_1}(F[f+\varepsilon_2\delta_{x_2}+\varepsilon_1\delta_{x_1}]-F[f+\varepsilon_2\delta_{x_2}]) - \lim_{\varepsilon_1\rightarrow 0}\frac{1}{\varepsilon_1}(F[f+\varepsilon_1\delta_{x_1}]-F[f]) \Big] \\ &= \lim_{\varepsilon_{1,2}\rightarrow 0}\frac{1}{\varepsilon_1\varepsilon_2}(F[f+\varepsilon_1\delta_{x_1}+\varepsilon_2\delta_{x_2}] - F[f+\varepsilon_1\delta_{x_1}] - F[f+\varepsilon_2\delta_{x_2}] + F[f])\end{align}</script>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学基础 </tag>
            
            <tag> 泛函分析 </tag>
            
            <tag> 变分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Stat】误差分布是正态分布</title>
      <link href="academic/%E3%80%90Stat%E3%80%91%E8%AF%AF%E5%B7%AE%E5%88%86%E5%B8%83%E6%98%AF%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/"/>
      <url>academic/%E3%80%90Stat%E3%80%91%E8%AF%AF%E5%B7%AE%E5%88%86%E5%B8%83%E6%98%AF%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>高斯当年的证明方式</p></blockquote><a id="more"></a><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>对于某个随机变量$X$，设现在有$n$个独立的实验观测值$x_{i}, i=1,\cdots,n$，记所有观测值的平均值为$\bar{x} = \cfrac{1}{n}\sum_{i=1}^{n}x_{i}$，并先验的认为$\bar{x}$是$X$真值的有效估计量（基于等概率假设），由此可以推导出$X$的误差满足正态分布$N(0, \sigma^2)$。</p><h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>某个实测值$x_{o}$和真值$x$之间的误差为$\Delta x_{o} = x_{o} - x$，设$X$的归一化误差分布函数为$f(\Delta x)$，则我们可以写出关于$x$的似然函数</p><script type="math/tex; mode=display">\begin{align}   L(x) = \prod_{i=1}^{n}f(\Delta x_{i}) = \prod_{i=1}^{n}f(x_{i}-x) \end{align}</script><p>对数似然函数及其对$x$的导数分别为</p><script type="math/tex; mode=display">\begin{align}   \ln{L(x)} &= \sum_{i=1}^{n}\ln{f(x_{i}-x)} \\   \frac{\text{d}\ln{L(x)}}{\text{d}x} &= -\sum_{i=1}^{n}\frac{f' (x_{i}-x)}{f(x_{i}-x)} \end{align}</script><p>记$g(y)=\cfrac{f’ (y)}{f(y)}$（为了减小歧义，这里的变元记为$y(=\Delta x)$而不是$x$），最大化似然函数给出的方程为</p><script type="math/tex; mode=display">\begin{align}   -\cfrac{\text{d}\ln{L(x)}}{\text{d}x} = \sum_{i=1}^{n}g(x_{i}-x) \triangleq 0 \end{align}</script><p>由于我们合理地认为平均值$\bar{x}$是$X$真值的有效估计量，因此$x = \bar{x}$是上述方程的解，即</p><script type="math/tex; mode=display">\begin{align}   \sum_{i=1}^{n}g(x_{i}-\bar{x}) = 0 \quad (\star) \end{align}</script><p>为了确定$g(x)$的具体形式（进而得到$f(x)$的形式），我们需要探索上面方程的性质。对诸$x_{j}$分别求导可得：</p><script type="math/tex; mode=display">\begin{align}   0 = \frac{\partial}{\partial x_{j}}\sum_{i=1}^{n}g(x_{i}-\bar{x}) = (1-\frac{1}{n})g' (x_{j}-\bar{x}) + \sum_{i \neq j}(-\frac{1}{n})g' (x_{i}-\bar{x}), \quad j = 1,\cdots,n \end{align}</script><p>这是一个关于$g’ (x_{j}-\bar{x}), j=1,\cdots,n$为的$n$元线性方程组，其中任意两个方程（标记为$j_1, j_2$）相减可得</p><script type="math/tex; mode=display">\begin{equation}   g' (x_{j_1}-\bar{x}) = g' (x_{j_2}-\bar{x}),\quad \forall j_1 \neq j_2 \end{equation}</script><p>因此该线性方程组的解向量为<script type="math/tex">\vec{g'} = c(1, 1, \cdots, 1)^{T}</script>，$c$为任意常数。注意到$x_{j}, j=1,\cdots,n$其实是任意一组实验的结果，也就是说当$y_{j} \equiv x_{j}- \bar{x}$取任意值的时候都满足</p><script type="math/tex; mode=display">\begin{equation}   g' (y_{j}) \equiv g' (x_{j}-\bar{x}) = c, \quad \forall y_{j} \end{equation}</script><p>于是我们有</p><script type="math/tex; mode=display">\begin{equation}   g(y) = cy+b \end{equation}</script><p>带入$(\star)$式，注意到$\sum_{i=1}^{n} x_{i} = n\bar{x}$，得</p><script type="math/tex; mode=display">\begin{align}   \sum_{i=1}^{n}g(x_{i}-\bar{x}) = \sum_{i=1}^{n}[c(x_{i} - \bar{x})+b] = nb = 0 \quad \Rightarrow \quad b=0 \end{align}</script><script type="math/tex; mode=display">\begin{align}   \therefore \quad g(y) = \frac{f' (y)}{f(y)} = cy \quad \Rightarrow \quad f(y) = \frac{1}{K}\text{e}^{\frac{1}{2}cy^{2}} \end{align}</script><p>概率密度函数的归一性要求（也自然是收敛的）</p><script type="math/tex; mode=display">\begin{align}   \int_{-\infty}^{+\infty}f(y)\text{d}y = 1 \quad \Rightarrow \quad c = -\frac{1}{\sigma^{2}} < 0,\ \ K = \sqrt{2\pi}\sigma \end{align}</script><p>因此最终</p><script type="math/tex; mode=display">\begin{align}   f(\Delta x) = \frac{1}{\sqrt{2\pi}\sigma}\text{e}^{-\frac{1}{2}\frac{(\Delta x)^{2}}{\sigma^{2}}} \end{align}</script><p>与中心极限定理给出的随机变量$X$服从正态分布（为了不混淆，这里记为$F(x)$）</p><script type="math/tex; mode=display">\begin{align}   F(x) = \frac{1}{\sqrt{2\pi}\sigma}\text{e}^{-\frac{1}{2}\frac{(x-\mu)^{2}}{\sigma^{2}}} \end{align}</script><p>是一致的。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>Q1. 既然中心极限定理在$n \rightarrow \infty$时才给出正态分布，那么这个条件在上述证明推导中体现在哪里？<br>A1. 就体现在“先验的认为$\bar{x}$是$X$真值的有效估计量”这句话中，因为只有在实验次数足够多的情况下，这句话才是正确的。</p><p>Q2. $\mu$和$\bar{x}$好像不是一回事？<br>A2. 没错，因此上面最后说的“一致性”实际上是频率学派的一种观点，$\mu = E(X)$是$X$的期望，而$\bar{x}$是观测值的平均值，只有在“频率即概率”的含义下，这才是成立的。中心极限定理保证了大$n$情况下$\bar{x}$是$\mu$的有效估计量，即$\hat{\mu} = \bar{x}$。</p><p>Q3. 为什么是关于$x$的似然函数？似然函数不是应该关于未知参数吗？<br>A3. 真值$x$就是这个问题里面的未知参数，我们的似然函数实际上是以下概率：</p><script type="math/tex; mode=display">\begin{align} L(x) = P(X_1 = x_1, \cdots, X_n = x_n ; x) \end{align}</script><p>描述真值为$x$时，我们$n$次试验观测到的值分别为$x_1 , \cdots , x_n$的概率。在这个问题的处理过程中，尽管我们最终目的是得到$f(y)$的具体形式，但是一开始我们假装这一形式是知道的，然后采用传统的极大似人估计手段按部就班推导，直到需要求怎样的$x$使得似然函数最大化这一步骤时，我们先验的知道解就是$x = \bar{x}$，于是我们先前作似然估计是要解关于参数的代数方程，而现在则是要解关于分布形式的函数方程。</p><p>Q4. 这个证明方法是谁给出的？<br>A4. 大名鼎鼎的高斯。</p>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> statistics </tag>
            
            <tag> likelihood </tag>
            
            <tag> 正态分布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【整理】网络工具入口整合</title>
      <link href="others/%E3%80%90%E6%95%B4%E7%90%86%E3%80%91%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/"/>
      <url>others/%E3%80%90%E6%95%B4%E7%90%86%E3%80%91%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>工具方便找</p></blockquote><a id="more"></a><h1 id="工具向"><a href="#工具向" class="headerlink" title="工具向"></a>工具向</h1><h2 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h2><ul><li><a href="https://miku.tools/" target="_blank" rel="noopener">MikuTools</a></li><li><a href="http://tool.liumingye.cn/" target="_blank" rel="noopener">刘明野的工具箱</a></li></ul><h2 id="网络学校"><a href="#网络学校" class="headerlink" title="网络学校"></a>网络学校</h2><ul><li><a href="https://udacity.com/" target="_blank" rel="noopener">优达学城</a></li><li><a href="https://www.51zxw.net/" target="_blank" rel="noopener">我要自学网</a></li><li><a href="https://www.bilibili.com/v/technology/speech_course/#/" target="_blank" rel="noopener">B站·演讲·公开课</a></li><li><a href="https://open.163.com/" target="_blank" rel="noopener">网易公开课</a></li><li><a href="https://www.icourse163.org/" target="_blank" rel="noopener">中国大学MOOC</a></li><li><a href="http://www.xuetangx.com/" target="_blank" rel="noopener">学堂在线</a></li><li><a href="https://study.163.com/" target="_blank" rel="noopener">网易云课堂</a></li><li><a href="https://www.imooc.com/" target="_blank" rel="noopener">慕课网</a> </li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><h4 id="icon制作"><a href="#icon制作" class="headerlink" title="icon制作"></a>icon制作</h4><ul><li><a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a></li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h4><ul><li><a href="http://www.jlpcn.net/" target="_blank" rel="noopener">纪录片天地</a></li></ul><h4 id="演讲"><a href="#演讲" class="headerlink" title="演讲"></a>演讲</h4><ul><li><a href="https://www.ted.com/#/" target="_blank" rel="noopener">TED</a></li><li><a href="https://www.yxgapp.com/" target="_blank" rel="noopener">译学馆</a></li><li><a href="https://yixi.tv/" target="_blank" rel="noopener">一席</a></li></ul><h3 id="在线播放-解析"><a href="#在线播放-解析" class="headerlink" title="在线播放(解析)"></a>在线播放(解析)</h3><ul><li><a href="https://vip.huotuyouxi.com/" target="_blank" rel="noopener">火兔视频</a></li></ul><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="播放下载"><a href="#播放下载" class="headerlink" title="播放下载"></a>播放下载</h3><ul><li><a href="http://music.zhuolin.wang/" target="_blank" rel="noopener">VIP付费音乐解析下载</a></li><li><a href="http://www.gequdaquan.net/gqss/" target="_blank" rel="noopener">歌曲大全-音乐聚合搜索引擎</a></li><li><a href="http://music.sonimei.cn/" target="_blank" rel="noopener">全网音乐免费下载工具</a></li></ul><h2 id="文件传送"><a href="#文件传送" class="headerlink" title="文件传送"></a>文件传送</h2><ul><li><a href="https://wetransfer.com/" target="_blank" rel="noopener">WeTransfer</a></li></ul><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><ul><li>[]</li></ul><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><h3 id="学术翻译"><a href="#学术翻译" class="headerlink" title="学术翻译"></a>学术翻译</h3><ul><li><a href="http://dict.cnki.net/" target="_blank" rel="noopener">CNKI翻译助手</a></li><li><a href="http://www.termonline.cn/index.htm" target="_blank" rel="noopener">术语在线</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="生成短链接"><a href="#生成短链接" class="headerlink" title="生成短链接"></a>生成短链接</h3><ul><li><a href="http://h5ip.cn/" target="_blank" rel="noopener">短网址生成平台</a></li></ul><h1 id="资源向"><a href="#资源向" class="headerlink" title="资源向"></a>资源向</h1><h2 id="学习-资源"><a href="#学习-资源" class="headerlink" title="学习(资源)"></a>学习(资源)</h2><h3 id="Anything"><a href="#Anything" class="headerlink" title="Anything"></a>Anything</h3><ul><li><a href="https://learn-anything.xyz/" target="_blank" rel="noopener">Learn-Anything</a> (学习路线)</li><li><a href="http://slideplayer.com/" target="_blank" rel="noopener">SlidePlayer</a>（PPT资源）</li><li><a href="http://gen.lib.rus.ec/" target="_blank" rel="noopener">Library Genesis</a>（电子书）</li><li><a href="https://www.douban.com/group/topic/13784047/" target="_blank" rel="noopener">全球免费开放的电子图书馆</a></li><li><a href="https://www.slader.com/" target="_blank" rel="noopener">Slader</a>（课后习题解）</li></ul><h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><h4 id="汇总入口"><a href="#汇总入口" class="headerlink" title="汇总入口"></a>汇总入口</h4><ul><li><a href="http://1nami.com/site/168.html" target="_blank" rel="noopener">1纳米学习</a></li></ul><h4 id="综合教程"><a href="#综合教程" class="headerlink" title="综合教程"></a>综合教程</h4><h4 id="课程（免费）"><a href="#课程（免费）" class="headerlink" title="课程（免费）"></a>课程（免费）</h4><ul><li>[]</li></ul><h4 id="课程（付费）"><a href="#课程（付费）" class="headerlink" title="课程（付费）"></a>课程（付费）</h4><ul><li><a href="http://www.jikexueyuan.com/" target="_blank" rel="noopener">极客学院</a></li><li><a href="http://www.doyoudo.com/" target="_blank" rel="noopener">doyoudo</a></li></ul><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><h5 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h5><ul><li><a href="https://leetcode.com/problemset/all/" target="_blank" rel="noopener">LeetCode</a>  <a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">力扣</a></li><li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客网</a></li><li><a href="http://acm.hdu.edu.cn/listproblem.php?vol=1" target="_blank" rel="noopener">杭电OJ</a></li><li><a href="http://poj.org/problemlist" target="_blank" rel="noopener">北大OJ</a></li><li><a href="https://vjudge.net/" target="_blank" rel="noopener">Virtual Judge</a></li><li><a href="https://www.lintcode.com/problem/" target="_blank" rel="noopener">LintCode</a></li></ul><h4 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h4><h5 id="全栈"><a href="#全栈" class="headerlink" title="全栈"></a>全栈</h5><h6 id="ip解析"><a href="#ip解析" class="headerlink" title="ip解析"></a>ip解析</h6><ul><li><a href="https://www.ipaddress.com/" target="_blank" rel="noopener">The Best IP Address, Email and Networking Tools - IPAddress.com</a> (辅助配置<code>hosts</code>文件)</li></ul><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><h4 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h4><h5 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h5><ul><li><a href="https://github.com/jiajunhua/jlevy-the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a></li></ul><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><h4 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h4><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><h4 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h4><ul><li><a href="http://space.bilibili.com/88461692" target="_blank" rel="noopener">3Blue1Brown</a></li></ul><h4 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h4><h4 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h4><ul><li><a href="https://dlmf.nist.gov/" target="_blank" rel="noopener">NIST DLMF</a></li></ul><h3 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h3><h4 id="科普-1"><a href="#科普-1" class="headerlink" title="科普"></a>科普</h4><ul><li><a href="http://space.bilibili.com/223146252/" target="_blank" rel="noopener">妈咪说MommyTalk</a></li></ul><h4 id="课程-1"><a href="#课程-1" class="headerlink" title="课程"></a>课程</h4>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> collections </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python基础】Python3中鲜为人知的特性（积累中）</title>
      <link href="tutorial/%E3%80%90Python%E5%9F%BA%E7%A1%80%E3%80%91Python3%E4%B8%AD%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%88%E7%A7%AF%E7%B4%AF%E4%B8%AD%EF%BC%89/"/>
      <url>tutorial/%E3%80%90Python%E5%9F%BA%E7%A1%80%E3%80%91Python3%E4%B8%AD%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%88%E7%A7%AF%E7%B4%AF%E4%B8%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>小众知识点，说不定有奇效</p></blockquote><a id="more"></a><h3 id="1-列表超出索引范围不会报错的情况"><a href="#1-列表超出索引范围不会报错的情况" class="headerlink" title="1. 列表超出索引范围不会报错的情况"></a>1. 列表超出索引范围不会报错的情况</h3><p>通常当我们试图去访问一个列表的超出其最大索引的元素时，是会报错的<br><figure class="highlight python"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[<span class="number">4</span>]          <span class="comment"># 索引合法</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[<span class="number">5</span>]          <span class="comment"># 索引非法</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></p><p>然而，如果使用<strong>切片</strong>方式尝试超限访问<br><figure class="highlight python"><figcaption><span>console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[<span class="number">5</span>:]</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_list[:<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p><p>结果却没有报错。<br>并且实际上，字符串和<code>numpy</code>数组也具有类似的特性。</p><h3 id="2-参数组合"><a href="#2-参数组合" class="headerlink" title="2. 参数组合"></a>2. 参数组合</h3><p><strong>Python中一种可以使用5中传递参数的方式（位置参数、默认参数、变长参数、关键字参数、命名关键字参数）</strong>，并且需要严格按照所列出的顺序来书写编码。</p><p>以下面如下两个函数为例（<a href="https://blog.csdn.net/abc_12366/article/details/79627263" target="_blank" rel="noopener">来源</a>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(a, b, c=<span class="number">0</span>, *args, **kw)</span>:</span></span><br><span class="line">    <span class="string">"""样例函数，包含：位置参数，默认参数，变长参数，命名关键字参数"""</span>  </span><br><span class="line">    print(<span class="string">"a = "</span>, a, <span class="string">"b = "</span>, b, <span class="string">"args = "</span>, args, <span class="string">"kw = "</span>,kw)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a, b, c=<span class="number">0</span>, *, d, **kw)</span>:</span></span><br><span class="line">    <span class="string">"""样例函数，包含：位置参数，默认参数，变长参数，关键字参数，命名关键字参数"""</span></span><br><span class="line">    print(<span class="string">"a = "</span>, a, <span class="string">"b = "</span>, b, <span class="string">"c = "</span>, c, <span class="string">"d = "</span>, d, <span class="string">"kw = "</span>, kw)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只传入位置参数    </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">0</span> args =() kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = () kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, x=<span class="number">99</span>)</span><br><span class="line">a = <span class="number">1</span> b = <span class="number">2</span> c = <span class="number">3</span> args = (<span class="string">'a'</span>, <span class="string">'b'</span>) kw = &#123;<span class="string">'x'</span>:<span class="number">99</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2(<span class="number">1</span>, <span class="number">2</span>, d=<span class="number">99</span>, ext=<span class="literal">None</span>)</span><br><span class="line">a = <span class="number">1</span> b =<span class="number">2</span> c = <span class="number">0</span> d = <span class="number">99</span> kw = &#123;<span class="string">'ext'</span>:<span class="literal">None</span>&#125;</span><br></pre></td></tr></table></figure><p>单独的<code>*</code>只起到了分割传入参数的作用，自己并不是参数。<code>*</code>前面是普通参数（可隐名传入），<code>*</code>后面是关键字参数（必须显名传入）</p><h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> 语言特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python实战】PythonChallenge解谜</title>
      <link href="uncategorized/%E3%80%90Python%E5%AE%9E%E6%88%98%E3%80%91PythonChallenge%E8%A7%A3%E8%B0%9C/"/>
      <url>uncategorized/%E3%80%90Python%E5%AE%9E%E6%88%98%E3%80%91PythonChallenge%E8%A7%A3%E8%B0%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>目前进度第7关</p></blockquote><a id="more"></a><p>@<a href="题目列表">TOC</a></p><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>刷B站的时候发现有up主做互动视频是说编程解谜的，结果我在他视频的开头部分找到了解谜网站的地址就兴冲冲地过来自己玩起来了。在解谜的过程中发现还是学到了新的东西，于是干脆用这篇博客记录一下解谜的过程和答案。题目的话呢，大家自行到<a href="http://www.pythonchallenge.com/" target="_blank" rel="noopener">原网站</a>去看就好啦！</p><h1 id="Challenge-0"><a href="#Challenge-0" class="headerlink" title="Challenge 0"></a>Challenge 0</h1><p>这个题目用来热身还是不错的，新手友好。<br>提示很简单直接：尝试改网址。<br>尽管图片的提示写着$2^{38}$，我还是先将URL中的<code>0.html</code>改成了<code>1.html</code>，发现了第一个彩蛋：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2**38 is much much larger.</span><br></pre></td></tr></table></figure></p><p>而当我试着将数字继续修改为<code>2</code>,<code>3</code>甚至<code>-1</code>时，网页给出的结果都是枯燥的<strong>404</strong>，不再赘述。<br>其实出题人还是很用心的，当直接将URL的尾部修改为<code>2**38.html</code>时，你会看到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">give the answer, not the question.</span><br></pre></td></tr></table></figure><p>至此，通过这一关的方法很清楚了，就是将<code>2**38</code>的计算结果，也就是<code>274877906944</code>替换掉URL中的<code>0</code>就可以了。<br>后来我才知道，还有一个彩蛋是<code>238.html</code>，然后看到</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No... the 38 is a little bit above the 2...</span><br></pre></td></tr></table></figure><p>哈哈哈…</p><h1 id="Challenge-1"><a href="#Challenge-1" class="headerlink" title="Challenge 1"></a>Challenge 1</h1><p>首先映入眼帘的是一张图片和下面的一串乱码，显然需要搞清楚这串乱码（密文）隐藏了什么信息。<br>不过作为第1关，难度很低，从图片中直接获得了密钥信息：将所有的字母按照字母顺序后移两位。<br>有两个需要注意的点（不知道是不是作者的那句“做前三思”的提示是不是指这个）：</p><ul><li>密文中有非字母的字符</li><li>‘y’和‘z’应该分别对应到‘a’和‘b’</li></ul><p>给出我的初始答案<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">puzzle = <span class="string">"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp."</span> \</span><br><span class="line">         <span class="string">"bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. "</span> \</span><br><span class="line">         <span class="string">"sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj."</span></span><br><span class="line">answer = <span class="string">''</span>.join([chr(ord(c) + <span class="number">2</span>) <span class="keyword">if</span> c.isalpha() <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> puzzle])</span><br><span class="line">answer.replace(<span class="string">'&#123;'</span>, <span class="string">'a'</span>).replace(<span class="string">'|'</span>, <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure></p><p>得到明文<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"i hope you didnt translate it by hand. thats what computers are for.doing it in by hand is inefficient and that's why this text is so long. using string.maketrans() is recommended. now apply on the url."</span><br></pre></td></tr></table></figure></p><p>好的，出题人想让你学会用<code>string.maketrans()</code>这个字符串的方法。不过对于<code>Python3</code>，<code>string.maketrans()</code>被内建函数所取代。下面是这个使用该内建函数的代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line">alphab = string.ascii_lowercase</span><br><span class="line">trans_law = str.maketrans(alphab, alphab[<span class="number">2</span>:] + alphab[:<span class="number">2</span>])</span><br><span class="line">puzzle.translate(trans_law)</span><br></pre></td></tr></table></figure></p><p>显然，这个方法优雅了很多，从<a href="https://www.runoob.com/python3/python3-string-maketrans.html" target="_blank" rel="noopener">这里</a>还学到了<code>maketrans()</code>更多的用法。<br>按照破译出的提示，还需要将密钥作用到URL上，于是<code>map</code>被修改成<code>ocr</code>，进入下一关。</p><h1 id="Challenge-2"><a href="#Challenge-2" class="headerlink" title="Challenge 2"></a>Challenge 2</h1><p>看到“ocr”这个词的时候就知道题目跟文本识别有关系，不过这个关系原来只是个噱头，还是要看网页源码（作者贴心的将“MAYBE”大写了，图片那么模糊反正也不会有人真的去识别图片啦），在源码的注释里果然有玄机，注释完整内容就不贴在这里了，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find rare characters in the mess below:</span><br></pre></td></tr></table></figure></p><p>就是要从一串乱码里找到字符拼出内容来咯。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">answer = <span class="string">''</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> puzzle <span class="keyword">if</span> c.isalpha()])</span><br><span class="line">print(answer)</span><br></pre></td></tr></table></figure></p><p>答案是<code>equality</code>，从前面两道题目我们已经知道还是继续修改URL来进入下一关。</p><h1 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h1><p>根据提示，要找到一个小写字母，这个字母两侧都要紧邻有且只有三个大写字母。<br>图片的作用完全就是配个插图，整个页面也是很简单，所以还是从网页源代码里找，果然又是一长串的字符。<br>用正则来找一下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">answer = re.findall(re.compile(<span class="string">'[a-z][A-Z]&#123;3&#125;[a-z][A-Z]&#123;3&#125;[a-z]'</span>), puzzle)</span><br><span class="line">print(answer)</span><br></pre></td></tr></table></figure></p><p>为了保证是“有且仅有”，因此匹配的字符串样式的首尾都要加一个小写字母。然后发现原来答案不只一个<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'qIQNlQSLi'</span>,</span><br><span class="line"> <span class="string">'eOEKiVEYj'</span>,</span><br><span class="line"> <span class="string">'aZADnMCZq'</span>,</span><br><span class="line"> <span class="string">'bZUTkLYNg'</span>,</span><br><span class="line"> <span class="string">'uCNDeHSBj'</span>,</span><br><span class="line"> <span class="string">'kOIXdKBFh'</span>,</span><br><span class="line"> <span class="string">'dXJVlGZVm'</span>,</span><br><span class="line"> <span class="string">'gZAGiLQZx'</span>,</span><br><span class="line"> <span class="string">'vCJAsACFl'</span>,</span><br><span class="line"> <span class="string">'qKWGtIDCj'</span>]</span><br></pre></td></tr></table></figure></p><p>依次连接正中间的小写字母，得到<code>linkedlist</code>，即为通往下一关的钥匙。</p><h1 id="Challenge-4"><a href="#Challenge-4" class="headerlink" title="Challenge 4"></a>Challenge 4</h1><p><code>linkedlist.html</code>导向的网页显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linkedlist.php</span><br></pre></td></tr></table></figure></p><p>OK，我们来访问<code>linkedlist.php</code>，找到本关的题目。<br>在网页源码中看到了如下提示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">urllib may help. DON'T TRY ALL NOTHINGS, since it will never </span><br><span class="line">end. 400 times is more than enough.</span><br></pre></td></tr></table></figure><p><code>urllib</code>这是要请求网页了。<br>并且发现当前图片其实是一个跳转链接<code>linkedlist.php?nothing=12345</code>，尝试点击图片。新页面给出的信息如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and the next nothing is 44827</span><br></pre></td></tr></table></figure></p><p>继续把URL修改为<code>linkedlist.php?nothing=44827</code>，得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and the next nothing is 45439</span><br></pre></td></tr></table></figure></p><p>至此，我们可以确定后面很多很多页面都将是类似的结构。但是我们不知道最终要获取的信息具体是什么格式，所以暂且将所有页面内容都输出。<br>之前写爬虫还是习惯用<code>requests</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL_PREFIX = <span class="string">'http://www.pythonchallenge.com/pc/def/linkedlist.php'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(_code)</span>:</span></span><br><span class="line">    r = requests.get(url=URL_PREFIX, params=&#123;<span class="string">'nothing'</span>: _code&#125;)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line">    </span><br><span class="line">code = <span class="number">12345</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">400</span>):</span><br><span class="line">    page = get_page(code)</span><br><span class="line">    match = page.find(<span class="string">'is'</span>)</span><br><span class="line">    code = page[match+<span class="number">3</span>:]</span><br><span class="line">    print(page)</span><br></pre></td></tr></table></figure><p>在请求到350+次时，得到<code>peak.html</code>，此即下一关的URL。<br>不过在进入下一关前，我想分享一下我遇到的一些情况：<br>第三次（其实作者是为手动改URL的人准备的提示）请求</p><ul><li><code>nothing=45439</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>Your hands are getting tired <span class="tag">&lt;/<span class="name">font</span>&gt;</span>and the next nothing is 94485</span><br></pre></td></tr></table></figure></li></ul><p>接下来请求了80+次得到：</p><ul><li><code>nothing=16044</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes. Divide by two and keep going.</span><br></pre></td></tr></table></figure></li></ul><p>将初始的<code>12345</code>替换为<code>8022</code>之后，请求50+次时出现</p><ul><li><code>nothing=82682</code>：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">There maybe misleading numbers in the</span><br><span class="line">text. One example is 82683. Look only for the next nothing and the next nothing is 63579</span><br></pre></td></tr></table></figure></li></ul><p>看来我代码里面去匹配‘<code>is</code>’这个单词是不够的，anyway，不影响继续闯关也就无关紧要了。</p><h1 id="Challenge-5"><a href="#Challenge-5" class="headerlink" title="Challenge 5"></a>Challenge 5</h1><p>这一关本来对Pythoner来说是秒杀，因为题目是问<code>peak hell</code>的读音像什么词，那显然是<code>pickle</code>了。但是当请求<code>pickle.html</code>时，除了得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes! pickle!</span><br></pre></td></tr></table></figure></p><p>就什么也没有了…嗯??不是说有33关吗？看来还另有玄机。<br>回到原来的页面<code>peak.html</code>寻找线索，但是这个页面也是简单得不能再简单了，也没什么跳转链接…第一次卡关出现了…<br>沉淀了几天，再回来思考一下这一关。重新注意到<code>peak.html</code>的源码中的这个标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">peakhell</span> <span class="attr">src</span>=<span class="string">"banner.p"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- peak hell sounds familiar ? --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">peakhell</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显然<code>&lt;peakhell&gt;&lt;/peakhell&gt;</code>是作者自定义的一个标签，看来线索只可能是<code>banner.p</code>，结合这一关的核心内容它应该是一个<code>.pickle</code>文件，可以先来看一下<code>http://www.pythonchallenge.com/pc/def/banner.p</code>是什么内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lp0</span><br><span class="line">(lp1</span><br><span class="line">(S&apos; &apos;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">I95</span><br><span class="line">tp373</span><br><span class="line">aa.</span><br></pre></td></tr></table></figure></p><p>中间的省略号是一大串相似的内容，完全没有头绪。<br>现在尝试用Python来获取它的内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">'http://www.pythonchallenge.com/pc/def/banner.p'</span></span><br><span class="line"></span><br><span class="line">r = requests.get(URL) </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"banner.p"</span>,<span class="string">'wb'</span>) <span class="keyword">as</span> fw:</span><br><span class="line">    fw.write(r.content)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"banner.p"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> fr:</span><br><span class="line">    content = pickle.load(fr)</span><br></pre></td></tr></table></figure></p><p><code>content</code>是一个元素个数为<code>len(content) == 23</code>的列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[(<span class="string">' '</span>, <span class="number">95</span>)],</span><br><span class="line"> [(<span class="string">' '</span>, <span class="number">14</span>), (<span class="string">'#'</span>, <span class="number">5</span>), (<span class="string">' '</span>, <span class="number">70</span>), (<span class="string">'#'</span>, <span class="number">5</span>), (<span class="string">' '</span>, <span class="number">1</span>)],</span><br><span class="line"> [(<span class="string">' '</span>, <span class="number">15</span>), (<span class="string">'#'</span>, <span class="number">4</span>), (<span class="string">' '</span>, <span class="number">71</span>), (<span class="string">'#'</span>, <span class="number">4</span>), (<span class="string">' '</span>, <span class="number">1</span>)],</span><br><span class="line"><span class="meta">... </span>...</span><br><span class="line"> [(<span class="string">' '</span>, <span class="number">6</span>), (<span class="string">'#'</span>, <span class="number">3</span>), (<span class="string">' '</span>, <span class="number">5</span>), (<span class="string">'#'</span>, <span class="number">6</span>), (<span class="string">' '</span>, <span class="number">4</span>), (<span class="string">'#'</span>, <span class="number">5</span>), (<span class="string">' '</span>, <span class="number">4</span>), (<span class="string">'#'</span>, <span class="number">2</span>), (<span class="string">' '</span>, <span class="number">4</span>), (<span class="string">'#'</span>, <span class="number">4</span>), (<span class="string">' '</span>, <span class="number">1</span>), (<span class="string">'#'</span>, <span class="number">6</span>), (<span class="string">' '</span>, <span class="number">4</span>), (<span class="string">'#'</span>, <span class="number">11</span>), (<span class="string">' '</span>, <span class="number">4</span>), (<span class="string">'#'</span>, <span class="number">5</span>), (<span class="string">' '</span>, <span class="number">6</span>), (<span class="string">'#'</span>, <span class="number">3</span>), (<span class="string">' '</span>, <span class="number">6</span>), (<span class="string">'#'</span>, <span class="number">6</span>)],</span><br><span class="line"> [(<span class="string">' '</span>, <span class="number">95</span>)]]</span><br></pre></td></tr></table></figure></p><p>观察后不难发现，列表中的每个元素都是一个一维列表，其元素是长度为2的元组。个元组的0号元是“<code>`”和“</code>#`”中的一个，每个列表中的1号元的数字之和均为95。看来是一个二值图，这里可以用一行代码来解决：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\n'</span>.join([<span class="string">''</span>.join([element[<span class="number">0</span>] * element[<span class="number">1</span>] <span class="keyword">for</span> element <span class="keyword">in</span> content[irow]]) <span class="keyword">for</span> irow <span class="keyword">in</span> range(len(content))]))</span><br></pre></td></tr></table></figure></p><p>输出是<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">              #####                                                                      ##### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">               ####                                                                       #### </span><br><span class="line">      ###      ####   ###         ###       #####   ###    #####   ###          ###       #### </span><br><span class="line"><span class="meta">   #</span><span class="bash"><span class="comment">##   ##    #### #######     ##  ###      #### #######   #### #######     ###  ###     #### </span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">##     ###  #####    ####   ###   ####    #####    ####  #####    ####   ###     ###   #### </span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##           ####     ####   ###    ###    ####     ####  ####     ####  ###      ####  #### </span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##           ####     ####          ###    ####     ####  ####     ####  ###       ###  #### </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###           ####     ####     ##   ###    ####     ####  ####     #### ####       ###  #### </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###           ####     ####   ##########    ####     ####  ####     #### ##############  #### </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###           ####     ####  ###    ####    ####     ####  ####     #### ####            #### </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###           ####     #### ####     ###    ####     ####  ####     #### ####            #### </span></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"><span class="comment">##           ####     #### ####     ###    ####     ####  ####     ####  ###            #### </span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="comment">##      ##  ####     ####  ###    ####    ####     ####  ####     ####   ###      ##   #### </span></span></span><br><span class="line"><span class="meta">   #</span><span class="bash"><span class="comment">##    ##   ####     ####   ###########   ####     ####  ####     ####    ###    ##    #### </span></span></span><br><span class="line">      ###     ######    #####    ##    #### ######    ###########    #####      ###      ######</span><br></pre></td></tr></table></figure></p><p>也就是<code>channel.html</code>，过关！</p><h1 id="Challenge-6"><a href="#Challenge-6" class="headerlink" title="Challenge 6"></a>Challenge 6</h1><p>作者解释了打赏的部分和谜题无关（不过至少知道了作者的署名是thesamet），那么这一关的信息也很有限：一张“拉链”的图片。<br>注意到网页源码中的注释<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">--</span> <span class="attr">zip</span></span></span><br></pre></td></tr></table></figure></p><p>查看<code>zip.html</code>：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yes. find the zip.</span><br></pre></td></tr></table></figure></p><p><code>zip</code>除了表示拉链的意思，还是一种常用的压缩包的格式，因此这里可能是在提示去找压缩包。<br>尝试直接把<code>channel.html</code>改成<code>channel.zip</code>。果然浏览器就帮我自动下载了这个名称的压缩包。解压并打开获得的文件目录，里面居然有910个<code>.txt</code>文件，除了一个<code>readme.txt</code>外，其余都是一串数字命名的。<br>打开<code>readme.txt</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">welcome to my zipped list.</span><br><span class="line"></span><br><span class="line">hint1: start from 90052</span><br><span class="line">hint2: answer is inside the zip</span><br></pre></td></tr></table></figure></p><p>而且随机打开一个其他文件，都是<code>Next nothing is xxx</code>。这套路跟<code>Challenge 4</code>一样啊。不过既然我都已经把所有文件下载到本地了，似乎没有必要按照它要求的顺序遍历文件，尽管从代码量上也没什么明显区别。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">txts = os.listdir(<span class="string">'~/Downloads/channel/'</span>)</span><br><span class="line"><span class="keyword">for</span> txt <span class="keyword">in</span> txts:</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'~/Downloads/channel/'</span> + txt, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(txt, f.readlines())</span><br></pre></td></tr></table></figure></p><p>不一样的是<code>46145.txt</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collect the comments.</span><br></pre></td></tr></table></figure></p><p>收集注释？<code>readme.txt</code>中的第二条提示还没有使用。这里涉及到一个知识点，<code>zip</code>文件是可以添加注释的（比方说SOF上的<a href="https://stackoverflow.com/questions/50459135/how-to-add-comments-to-a-zip-file" target="_blank" rel="noopener">这个问题</a>），通过<code>zipfile.ZipFile</code>的<code>getinfo()</code>方法获取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">zf = zipfile.ZipFile(<span class="string">'~/Downloads/channel.zip'</span>, <span class="string">'r'</span>)</span><br><span class="line">code = <span class="number">90052</span></span><br><span class="line"><span class="keyword">while</span> code: </span><br><span class="line">    content = str(zf.read(<span class="string">f'<span class="subst">&#123;code&#125;</span>.txt'</span>))</span><br><span class="line">    match = re.search(<span class="string">'Next nothing is ([0-9]+)'</span>, content)</span><br><span class="line">    print(zf.getinfo(<span class="string">f'<span class="subst">&#123;code&#125;</span>.txt'</span>).comment.decode(<span class="string">'utf-8'</span>), end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        code = match.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>输出结果是：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">****************************************************************</span><br><span class="line">****************************************************************</span><br><span class="line">**                                                            **</span><br><span class="line">**   OO    OO    XX      YYYY    GG    GG  EEEEEE NN      NN  **</span><br><span class="line">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE  NN    NN   **</span><br><span class="line">**   OO    OO XXX  XXX YYY   YY  GG GG     EE       NN  NN    **</span><br><span class="line">**   OOOOOOOO XX    XX YY        GGG       EEEEE     NNNN     **</span><br><span class="line">**   OOOOOOOO XX    XX YY        GGG       EEEEE      NN      **</span><br><span class="line">**   OO    OO XXX  XXX YYY   YY  GG GG     EE         NN      **</span><br><span class="line">**   OO    OO  XXXXXX   YYYYYY   GG   GG   EEEEEE     NN      **</span><br><span class="line">**   OO    OO    XX      YYYY    GG    GG  EEEEEE     NN      **</span><br><span class="line">**                                                            **</span><br><span class="line">****************************************************************</span><br><span class="line"> **************************************************************</span><br></pre></td></tr></table></figure></p><p>结果是<code>hockey</code>，有点意思，当访问<code>hockey.html</code>时，却得到<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">it's in the air. look at the letters.</span><br></pre></td></tr></table></figure></p><p>回来再仔细看看上面的<code>hockey</code>字符图片，原来每个字母都是由另外的一个字母组成的，而这些“飘在空气中”的字母组成的单词是<code>oxygen</code>（这个双关很赞），这才是这关的最终答案。很有意思。</p><h1 id="Challenge-7"><a href="#Challenge-7" class="headerlink" title="Challenge 7"></a>Challenge 7</h1><p>来了来了它来了，我就知道会有在图片像素上做文章的题目。<br><code>http://www.pythonchallenge.com/pc/def/oxygen.png</code>的页面标题居然给出了图片的大小：<code>oxygen.png (629×95)</code>。加载这个图片的时间相对较长，所以玄机就在图片之中。<br>未完待续…</p><p>答案总结如下<br>| 题目序号 | 下一关的关键词 |                  彩蛋                  |<br>| :———: | :——————: | :——————————————————: |<br>|    0     | <code>274877906944</code> |          <code>1</code>，<code>238</code>，<code>2**38</code>           |<br>|    1     |     <code>ocr</code>      |                   —                   |<br>|    2     |   <code>equality</code>   |                   —                   |<br>|    3     |  <code>linkedlist</code>  |                   —                   |<br>|    4     |     <code>peak</code>     | <code>(nothing=)</code> <code>45439</code>，<code>16044</code>，<code>82682</code> |<br>|    5     |   <code>channel</code>    |                <code>pickle</code>                |<br>|    6     |    <code>oxygen</code>    |            <code>zip</code>，<code>hockey</code>             |</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 解谜游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【运维】IP地址修改</title>
      <link href="tutorial/%E3%80%90%E8%BF%90%E7%BB%B4%E3%80%91IP%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9/"/>
      <url>tutorial/%E3%80%90%E8%BF%90%E7%BB%B4%E3%80%91IP%E5%9C%B0%E5%9D%80%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>换机房的技术部分记录</p></blockquote><a id="more"></a><h3 id="修改IP地址"><a href="#修改IP地址" class="headerlink" title="修改IP地址"></a>修改IP地址</h3><p>由于物理网口变化，设备的IP地址也随之改变，我们记新的IP为<code>1WW.XXX.YYY.ZZ</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/network/interfaces</span><br></pre></td></tr></table></figure></p><p>找到<code>auto enp1s0f0</code>段落的<code>address</code>字段，将其更改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">address 1WW.XXX.YYY.ZZ</span><br></pre></td></tr></table></figure></p><p>同时相应的网关等参数也需要修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">network 1WW.XXX.YYY.0</span><br><span class="line">gateway 1WW.XXX.YYY.1</span><br><span class="line">dns-nameservers 1WW.XXX.A.BBB 1WW.XXX.A.CCC  # 根据机房管理人员提供的信息</span><br></pre></td></tr></table></figure></p><p>重启机器。（去学校信息中心申请网络账户IP解绑和绑定新IP，以及申请域名的过程略去不表）</p><h3 id="开放特定端口"><a href="#开放特定端口" class="headerlink" title="开放特定端口"></a>开放特定端口</h3><p>当发现IP地址<code>1WW.XXX.YYY.ZZ</code>可以被<code>ping</code>通之后，说明网络连接已经没有问题。但是如果这时无法正常通过SSH访问（当然<strong>搬机房之前</strong>SSH配置已经完成了，这里讲的是换机房的操作，第一次set-up时会更繁琐些）。<br>修改防火墙配置，允许端口<code>&lt;PORT&gt;</code>放行（如<code>3456</code>），注意要注明协议<code>tcp</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw allow &lt;PORT&gt;/tcp</span><br></pre></td></tr></table></figure></p><h3 id="挂载存储服务器"><a href="#挂载存储服务器" class="headerlink" title="挂载存储服务器"></a>挂载存储服务器</h3><p>可以注意到，在上面提及的<code>/etc/network/interfaces</code>已经配好了在局域网中计算服务器的内网IP地址<code>192.168.2.1</code>。现在我们需要在计算服务器上挂载存储服务器，然后就可以在计算服务器上直接访问存储数据了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mount -t nfs 192.168.PP.QQ:/data /data</span><br></pre></td></tr></table></figure></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>以上操作结束后，就可以正常使用服务器了。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>计算服务器<a href="https://www.supermicro.org.cn/manuals/superserver/4U/MNL-1583.pdf" target="_blank" rel="noopener">手册</a></li><li>存储服务器<a href="https://www.supermicro.org.cn/manuals/superserver/4U/MNL-1727.pdf" target="_blank" rel="noopener">手册</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux运维 </tag>
            
            <tag> IP地址 </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> ufw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux-Shell】文本匹配</title>
      <link href="tutorial/%E3%80%90Linux-Shell%E3%80%91%E6%96%87%E6%9C%AC%E5%8C%B9%E9%85%8D/"/>
      <url>tutorial/%E3%80%90Linux-Shell%E3%80%91%E6%96%87%E6%9C%AC%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<blockquote><p>grep sed awk 对目标文件匹配任意特定目标文本</p></blockquote><a id="more"></a><p>在以下的代码中，<code>PATTERN_1</code>和<code>PATTERN_2</code>是匹配文本，<code>FILE</code>是目标文件</p><h2 id="匹配任意一个目标文本（or匹配）"><a href="#匹配任意一个目标文本（or匹配）" class="headerlink" title="匹配任意一个目标文本（or匹配）"></a>匹配任意一个目标文本（or匹配）</h2><h3 id="grep方式"><a href="#grep方式" class="headerlink" title="grep方式"></a><code>grep</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">'PATTERN_1\|PATTERN_2'</span> FILE</span><br><span class="line">grep -E <span class="string">'PATTERN_1|PATTERN_2'</span> FILE  <span class="comment"># 等价于egrep 'PATTERN_1|PATTERN_2' FILE, 以下的grep -E均等价于egrep</span></span><br><span class="line">grep -e <span class="string">'PATTERN_1'</span> -e <span class="string">'PATTERN_2'</span> FILE  <span class="comment"># 这里的引号不是必需的</span></span><br></pre></td></tr></table></figure><h3 id="awk方式"><a href="#awk方式" class="headerlink" title="awk方式"></a><code>awk</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'/PATTERN_1|PATTERN_2/'</span> FILE</span><br></pre></td></tr></table></figure><h3 id="sed方式"><a href="#sed方式" class="headerlink" title="sed方式"></a><code>sed</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -e <span class="string">'/PATTERN_1/b'</span> -e <span class="string">'/PATTERN_2/b'</span> -e d FILE</span><br></pre></td></tr></table></figure><h2 id="匹配全部目标文本（and匹配）"><a href="#匹配全部目标文本（and匹配）" class="headerlink" title="匹配全部目标文本（and匹配）"></a>匹配全部目标文本（and匹配）</h2><h3 id="grep方式-1"><a href="#grep方式-1" class="headerlink" title="grep方式"></a><code>grep</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATTERN_1在PATTERN_2必须在之前</span></span><br><span class="line">grep </span><br><span class="line">grep -E <span class="string">'PATTERN_1.*PATTERN_2'</span> FILE</span><br><span class="line"><span class="comment"># PATTERN_1和PATTERN_2顺序任意</span></span><br><span class="line">grep -E <span class="string">'PATTERN_1.*PATTERN_2|PATTERN_2.*PATTERN_1'</span> FILE</span><br><span class="line">grep <span class="string">'PATTERN_1'</span> FILE | grep <span class="string">'PATTERN_2'</span>  <span class="comment"># [Recommend]</span></span><br></pre></td></tr></table></figure><h3 id="awk方式-1"><a href="#awk方式-1" class="headerlink" title="awk方式"></a><code>awk</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATTERN_1在PATTERN_2必须在之前</span></span><br><span class="line">awk <span class="string">'/PATTERN_1.*PATTERN_2/'</span> FILE</span><br><span class="line"><span class="comment"># PATTERN_1和PATTERN_2顺序任意</span></span><br><span class="line">awk <span class="string">'/PATTERN_1/ &amp;&amp; /PATTERN_2/'</span> FILE  <span class="comment"># [Recommend]</span></span><br></pre></td></tr></table></figure><h3 id="sed方式-1"><a href="#sed方式-1" class="headerlink" title="sed方式"></a><code>sed</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATTERN_1在PATTERN_2必须在之前</span></span><br><span class="line">sed <span class="string">'/PATTERN1.*PATTERN2/!d'</span> FILE</span><br><span class="line"><span class="comment"># PATTERN_1和PATTERN_2顺序任意</span></span><br><span class="line">sed <span class="string">'/PATTERN_1/!d; /PATTERN_2/!d'</span> FILE</span><br></pre></td></tr></table></figure><h2 id="匹配不含目标文本（not匹配）"><a href="#匹配不含目标文本（not匹配）" class="headerlink" title="匹配不含目标文本（not匹配）"></a>匹配不含目标文本（not匹配）</h2><h3 id="grep方式-2"><a href="#grep方式-2" class="headerlink" title="grep方式"></a><code>grep</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">'PATTERN_1'</span> FILE</span><br></pre></td></tr></table></figure><h3 id="awk方式-2"><a href="#awk方式-2" class="headerlink" title="awk方式"></a><code>awk</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">'!/PATTERN_1/'</span> FILE</span><br></pre></td></tr></table></figure><h3 id="sed方式-2"><a href="#sed方式-2" class="headerlink" title="sed方式"></a><code>sed</code>方式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n <span class="string">'/PATTERN_1/!p'</span> FILE</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于熟练使用正则表达式的小伙伴来说，<code>grep</code>和<code>awk</code>用起来很顺手</li><li><code>grep</code>相比<code>awk</code>和<code>sed</code>来说的一个重要优势是输出有高亮</li><li><code>egrep</code>比<code>grep</code>更方便</li></ul>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux Shell </tag>
            
            <tag> grep </tag>
            
            <tag> sed </tag>
            
            <tag> awk </tag>
            
            <tag> 文本匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python基础】字符编码</title>
      <link href="tutorial/%E3%80%90Python%E5%9F%BA%E7%A1%80%E3%80%91%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/"/>
      <url>tutorial/%E3%80%90Python%E5%9F%BA%E7%A1%80%E3%80%91%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E7%BC%96%E7%A0%81%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>chardet</p></blockquote><a id="more"></a><h2 id="使用chardet库判断文件编码类型"><a href="#使用chardet库判断文件编码类型" class="headerlink" title="使用chardet库判断文件编码类型"></a>使用<a href="https://chardet.readthedocs.io/en/latest/usage.html" target="_blank" rel="noopener"><code>chardet</code></a>库判断文件编码类型</h2><p>对于目标文件<code>/path/to/file.txt</code>来说，使用如下代码<br><figure class="highlight python"><figcaption><span>detect.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chardet</span><br><span class="line"></span><br><span class="line">FILE = <span class="string">'/path/to/file.txt'</span></span><br><span class="line"><span class="keyword">with</span> open(FILE, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">print(chardet.detect(data))</span><br></pre></td></tr></table></figure></p><ul><li>输出是一个包含编码的猜测类型，和一个置信概率。</li><li>所给出的结果大部分情况是有效的，但是如果置信概率并不接近1时，反馈的结果不一定是准确的，可以使用类似的编码进行试验。</li><li>有一点需要注意，必须使用二进制方式读取文件。而文件的后缀名是无所谓的。</li></ul><h2 id="读取特定编码类型的文件"><a href="#读取特定编码类型的文件" class="headerlink" title="读取特定编码类型的文件"></a>读取特定编码类型的文件</h2><p>当知道了文件编码之后，读取就变得容易得多了，这里以<code>gbk</code>做示范<br><figure class="highlight python"><figcaption><span>read.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(FILE, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().decode(<span class="string">'gbk'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
            <tag> 字符编码 </tag>
            
            <tag> 文件读取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DM】暗物质研究领域相关缩略语</title>
      <link href="academic/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%A0%94%E7%A9%B6%E9%A2%86%E5%9F%9F%E7%9B%B8%E5%85%B3%E7%BC%A9%E7%95%A5%E8%AF%AD/"/>
      <url>academic/%E3%80%90DM%E3%80%91%E6%9A%97%E7%89%A9%E8%B4%A8%E7%A0%94%E7%A9%B6%E9%A2%86%E5%9F%9F%E7%9B%B8%E5%85%B3%E7%BC%A9%E7%95%A5%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每个分类中按首字母字典序列出</p></blockquote><a id="more"></a><p>PS. “*”表示中文翻译需要再考证。链接跳转至对应的wikipedia词条。</p><h2 id="一-理论模型和相关术语"><a href="#一-理论模型和相关术语" class="headerlink" title="一. 理论模型和相关术语"></a><strong>一. 理论模型和相关术语</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>$\Lambda\text{CDM}$</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Lambda-CDM_model" target="_blank" rel="noopener"><strong>Lambda</strong> <strong>C</strong>old <strong>D</strong>ark <strong>M</strong>atter (Model)</a></td><td style="text-align:left">包含宇宙学常数的冷物质(模型)</td></tr><tr><td style="text-align:center"><strong>BSM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Physics_beyond_the_Standard_Model" target="_blank" rel="noopener">(Physics) <strong>B</strong>eyond the <strong>S</strong>tandard <strong>M</strong>odel</a></td><td style="text-align:left">超出标准模型(的物理)</td></tr><tr><td style="text-align:center"><strong>CMSSM/ mSUGRA</strong></td><td style="text-align:left"><strong>C</strong>onstrained <strong>M</strong>inimal <strong>S</strong>upersymmetric <strong>S</strong>tandard <strong>M</strong>odel/<strong>m</strong>inimal <strong>SU</strong>per<strong>GRA</strong>vity</td><td style="text-align:left">约束最小超对称标准模型/最小超引力</td></tr><tr><td style="text-align:center"><strong>MOND</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Modified_Newtonian_dynamics" target="_blank" rel="noopener"><strong>MO</strong>dified <strong>N</strong>ewtonian <strong>D</strong>ynamics</a></td><td style="text-align:left">修正牛顿动力学</td></tr><tr><td style="text-align:center"><strong>MSSM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Minimal_Supersymmetric_Standard_Model" target="_blank" rel="noopener"><strong>M</strong>inimal <strong>S</strong>upersymmetric <strong>S</strong>tandard <strong>M</strong>odel</a></td><td style="text-align:left">最小超对称标准模型</td></tr><tr><td style="text-align:center"><strong>NMSSM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Next-to-Minimal_Supersymmetric_Standard_Model" target="_blank" rel="noopener"><strong>N</strong>ext-to-<strong>M</strong>inimal <strong>S</strong>upersymmetric <strong>S</strong>tandard <strong>M</strong>odel</a></td><td style="text-align:left">下一个最小超对称标准模型*</td></tr><tr><td style="text-align:center"><strong>NMSM</strong></td><td style="text-align:left">New Minimal <strong>S</strong>tandard <strong>M</strong>odel</td><td style="text-align:left">新最小(扩展)标准模型*</td></tr><tr><td style="text-align:center"><strong>SM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Standard_Model" target="_blank" rel="noopener"><strong>S</strong>tandard <strong>M</strong>odel</a></td><td style="text-align:left">标准模型</td></tr><tr><td style="text-align:center"><strong>SUSY</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Supersymmetry" target="_blank" rel="noopener"><strong>SU</strong>per<strong>SY</strong>mmetry</a></td><td style="text-align:left">超对称</td></tr><tr><td style="text-align:center"><strong>UED</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Universal_extra_dimension" target="_blank" rel="noopener"><strong>U</strong>niversal <strong>E</strong>xtra <strong>D</strong>imension</a></td><td style="text-align:left">普遍额外维*</td></tr><tr><td style="text-align:center"><strong>VEV</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Vacuum_expectation_value" target="_blank" rel="noopener"><strong>V</strong>acuum <strong>E</strong>xpectation <strong>V</strong>alue</a></td><td style="text-align:left">真空期望值</td></tr></tbody></table></div><h2 id="二-物理机制和物理过程"><a href="#二-物理机制和物理过程" class="headerlink" title="二. 物理机制和物理过程"></a><strong>二. 物理机制和物理过程</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>BBN</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Big_Bang_nucleosynthesis" target="_blank" rel="noopener"><strong>B</strong>ig <strong>B</strong>ang <strong>N</strong>ucleosynthesis</a></td><td style="text-align:left">大爆炸核合成</td></tr><tr><td style="text-align:center"><strong>CMB</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Cosmic_microwave_background" target="_blank" rel="noopener"><strong>C</strong>osmic <strong>M</strong>icrowave <strong>B</strong>ackground</a></td><td style="text-align:left">宇宙微波背景</td></tr><tr><td style="text-align:center"><strong>EoR</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Reionization" target="_blank" rel="noopener"><strong>E</strong>poch <strong>o</strong>f <strong>R</strong>eionization</a></td><td style="text-align:left">再电离时期</td></tr></tbody></table></div><h2 id="三-粒子及其他具体研究对象名称"><a href="#三-粒子及其他具体研究对象名称" class="headerlink" title="三. 粒子及其他具体研究对象名称"></a><strong>三. 粒子及其他具体研究对象名称</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>CDM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Cold_dark_matter" target="_blank" rel="noopener"><strong>C</strong>old <strong>D</strong>ark <strong>M</strong>atter</a></td><td style="text-align:left">冷暗物质</td></tr><tr><td style="text-align:center"><strong>CHAMP</strong></td><td style="text-align:left"><strong>CHA</strong>rged <strong>M</strong>assive <strong>P</strong>article</td><td style="text-align:left">有荷大质量粒子*</td></tr><tr><td style="text-align:center"><strong>FDM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Fuzzy_cold_dark_matter" target="_blank" rel="noopener"><strong>F</strong>uzzy (cold) <strong>D</strong>ark <strong>M</strong>atter</a></td><td style="text-align:left">模糊暗物质*（弥散？）</td></tr><tr><td style="text-align:center"><strong>HDM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Hot_dark_matter" target="_blank" rel="noopener"><strong>H</strong>ot <strong>D</strong>ark <strong>M</strong>atter</a></td><td style="text-align:left">热暗物质</td></tr><tr><td style="text-align:center"><strong>LKP</strong></td><td style="text-align:left"><strong>L</strong>ightest <strong>$KK$</strong>(state) <strong>P</strong>article</td><td style="text-align:left">最轻Kaluza-Klein(态)粒子</td></tr><tr><td style="text-align:center"><strong>LSP</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Lightest_Supersymmetric_Particle" target="_blank" rel="noopener"><strong>L</strong>ightest <strong>S</strong>upersymmetric <strong>P</strong>article</a></td><td style="text-align:left">最轻超对称粒子</td></tr><tr><td style="text-align:center"><strong>LTP</strong></td><td style="text-align:left"><strong>L</strong>ightest <strong>$T$</strong>-odd <strong>P</strong>article</td><td style="text-align:left">最轻奇T宇称粒子</td></tr><tr><td style="text-align:center"><strong>LZP</strong></td><td style="text-align:left"><strong>L</strong>ightest <strong>$\mathbb{Z}_{3}$</strong> charged <strong>P</strong>article</td><td style="text-align:left">最轻$\mathbb{Z}_{3}$荷粒子*</td></tr><tr><td style="text-align:center"><strong>MACHO</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Massive_compact_halo_object" target="_blank" rel="noopener"><strong>MA</strong>ssive <strong>C</strong>ompact <strong>H</strong>alo <strong>O</strong>bject</a></td><td style="text-align:left">晕族大质量致密天体</td></tr><tr><td style="text-align:center"><strong>PBH</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Primordial_black_hole" target="_blank" rel="noopener"><strong>P</strong>rimordial <strong>B</strong>lack <strong>H</strong>ole</a></td><td style="text-align:left">原初黑洞</td></tr><tr><td style="text-align:center"><strong>SIMP</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Strongly_interacting_massive_particle" target="_blank" rel="noopener"><strong>S</strong>trongly <strong>I</strong>nteracting <strong>M</strong>assive <strong>P</strong>article</a></td><td style="text-align:left">强相互作用大质量粒子</td></tr><tr><td style="text-align:center"><strong>WDM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Warm_dark_matter" target="_blank" rel="noopener"><strong>W</strong>arm <strong>D</strong>ark <strong>M</strong>atter</a></td><td style="text-align:left">温暗物质</td></tr><tr><td style="text-align:center"><strong>WIMP</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Weakly_interacting_massive_particles" target="_blank" rel="noopener"><strong>W</strong>eakly <strong>I</strong>nteracting <strong>M</strong>assive <strong>P</strong>article</a></td><td style="text-align:left">弱相互作用大质量粒子</td></tr></tbody></table></div><h2 id="四-大科学装置及探测器部件-实验团队"><a href="#四-大科学装置及探测器部件-实验团队" class="headerlink" title="四. 大科学装置及探测器部件(实验团队)"></a><strong>四. 大科学装置及探测器部件(实验团队)</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>ATLAS</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/ATLAS_experiment" target="_blank" rel="noopener"><strong>A</strong> <strong>T</strong>oroidal <strong>L</strong>HC <strong>A</strong>pparatu<strong>S</strong></a></td><td style="text-align:left">环形LHC装置</td></tr><tr><td style="text-align:center"><strong>CMS</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Compact_Muon_Solenoid" target="_blank" rel="noopener"><strong>Compact</strong> <strong>M</strong>uon <strong>S</strong>olenoid</a></td><td style="text-align:left">紧凑$\mu$子螺线管</td></tr><tr><td style="text-align:center"><strong>LEP</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Large_Electron%E2%80%93Positron_Collider" target="_blank" rel="noopener"><strong>L</strong>arge <strong>E</strong>lectron-<strong>P</strong>ositron Collider</a></td><td style="text-align:left">大型正负电子对撞机</td></tr><tr><td style="text-align:center"><strong>LHC</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Large_Hadron_Collider" target="_blank" rel="noopener"><strong>L</strong>arge <strong>H</strong>adron Collider</a></td><td style="text-align:left">大型强子对撞机</td></tr><tr><td style="text-align:center"><strong>LHCb</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/LHCb_experiment" target="_blank" rel="noopener"><strong>LHC</strong>-<strong>b</strong>eauty</a></td><td style="text-align:left">LHCb实验*</td></tr><tr><td style="text-align:center"><strong>ALICE</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/ALICE_experiment" target="_blank" rel="noopener"><strong>A</strong> <strong>L</strong>arge <strong>I</strong>on <strong>C</strong>ollider <strong>E</strong>xperiment</a></td><td style="text-align:left">大型离子对撞机实验</td></tr></tbody></table></div><h2 id="五-研究机构"><a href="#五-研究机构" class="headerlink" title="五. 研究机构"></a><strong>五. 研究机构</strong></h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>CERN</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/CERN" target="_blank" rel="noopener"><strong>C</strong>onseil <strong>E</strong>uropéen pour la <strong>R</strong>echerche <strong>N</strong>ucléaire</a> (European Organization for Nuclear Research)</td><td style="text-align:left">欧洲核子研究组织/中心</td></tr></tbody></table></div><h2 id="文献中涉及到的其他缩略语"><a href="#文献中涉及到的其他缩略语" class="headerlink" title="文献中涉及到的其他缩略语"></a>文献中涉及到的其他缩略语</h2><div class="table-container"><table><thead><tr><th style="text-align:center">缩略</th><th style="text-align:left">全称</th><th style="text-align:left">中文</th></tr></thead><tbody><tr><td style="text-align:center"><strong>ICM</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Intracluster_medium" target="_blank" rel="noopener"><strong>I</strong>ntra<strong>C</strong>luster <strong>M</strong>edium</a></td><td style="text-align:left">星系团内介质</td></tr><tr><td style="text-align:center"><strong>LMC</strong></td><td style="text-align:left"><a href="https://en.wikipedia.org/wiki/Large_Magellanic_Cloud" target="_blank" rel="noopener"><strong>L</strong>arge <strong>M</strong>agellanic <strong>C</strong>loud</a></td><td style="text-align:left">大麦哲伦星云</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> physics </tag>
            
            <tag> particle physics </tag>
            
            <tag> terminology </tag>
            
            <tag> dark matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】极速搭建Hexo博客</title>
      <link href="tutorial/%E3%80%90Hexo%E3%80%91%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
      <url>tutorial/%E3%80%90Hexo%E3%80%91%E6%9E%81%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo是一款流行的博客框架，基于Node.js，支持Markdown语法。这篇文章记录我如何完成搭建并部署到Github Pages上。</p></blockquote><a id="more"></a><h1 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h1><p>养成隔离项目环境的好习惯<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 -m venv venv_blog    <span class="comment"># 创建虚拟环境</span></span><br><span class="line">. venv_blog/bin/activate     <span class="comment"># 激活虚拟环境</span></span><br><span class="line">mkdir Blog &amp;&amp; <span class="built_in">cd</span> Blog        <span class="comment"># 创建并进入项目目录</span></span><br></pre></td></tr></table></figure></p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装<code>Node.js</code></h1><p>这是第一个坑，千万不要使用<code>yum</code>直接安装，似乎是直接安装版本太低，后面会有问题而无法继续。</p><h2 id="下载特定版本"><a href="#下载特定版本" class="headerlink" title="下载特定版本"></a>下载特定版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://nodejs.org/dist/v9.3.0/node-v9.3.0-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">xz -d node-v9.3.0-linux-x64.tar.xz</span><br><span class="line">tar -xvf node-v9.3.0-linux-x64.tar</span><br><span class="line"><span class="comment"># 移至指定目录</span></span><br><span class="line">mv node-v9.3.0-linux-x64 /usr/<span class="built_in">local</span>/node</span><br><span class="line">rm node-v9.3.0-linux-x64.tar.xz  <span class="comment"># 或保持在`Blog`目录下rm -rf *</span></span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>打开配置文件<code>/etc/profile</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在底部添加<code>PATH</code>变量<br><figure class="highlight bash"><figcaption><span>profile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/node/bin</span><br></pre></td></tr></table></figure></p><p>保存退出</p><h1 id="安装git和npm-常用"><a href="#安装git和npm-常用" class="headerlink" title="安装git和npm (常用)"></a>安装<code>git</code>和<code>npm</code> (常用)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install git npm</span><br></pre></td></tr></table></figure><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可能会遇到下载速度太慢的问题，可切换至淘宝镜像源</span></span><br><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 安装hexo命令行客户端</span></span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="运行Hexo"><a href="#运行Hexo" class="headerlink" title="运行Hexo"></a>运行Hexo</h1><h2 id="初始化安装"><a href="#初始化安装" class="headerlink" title="初始化安装"></a>初始化安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init    # 初始化</span><br><span class="line">npm install</span><br><span class="line">hexo -v      # 涉及到的各种组件版本</span><br></pre></td></tr></table></figure><h2 id="本地启动（用于测试，可跳过）"><a href="#本地启动（用于测试，可跳过）" class="headerlink" title="本地启动（用于测试，可跳过）"></a>本地启动（用于测试，可跳过）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s       <span class="comment"># 等价于`hexo server`</span></span><br><span class="line"><span class="comment"># 在另一个终端下</span></span><br><span class="line">elinks http://localhost:4000/</span><br></pre></td></tr></table></figure><p>执行上面第一条命令时如遇到“FATAL Port 4000 has been used. Try other port instead.”，则需要切换端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000    <span class="comment"># 其他端口类似</span></span><br><span class="line"><span class="comment"># 在另一个终端下</span></span><br><span class="line">elinks http://localhost:5000/</span><br></pre></td></tr></table></figure></p><p><code>Ctrl + C</code>退出。</p><h1 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到Github Page</h1><h2 id="创建指定repo"><a href="#创建指定repo" class="headerlink" title="创建指定repo"></a>创建指定repo</h2><p>首先需要到你的Github上开启一个新的项目，但是需要按照一定规则：假设你的Github用户名是“<code>&lt;guser&gt;</code>”，那么repo名称必须为<code>&lt;guser&gt;.github.io.git</code>，随后创建即可。</p><h2 id="安装git-deployer插件"><a href="#安装git-deployer插件" class="headerlink" title="安装git deployer插件"></a>安装git deployer插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="修改网站配置文件-config-yml"><a href="#修改网站配置文件-config-yml" class="headerlink" title="修改网站配置文件_config.yml"></a>修改网站配置文件<code>_config.yml</code></h2><p>打开<code>Blog</code>目录下的<code>_config.yml</code>文件，找到<code># Deployment</code>部分（一般是文件末尾处），<code>deploy</code>下的参数设置如下<br><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;guser&gt;/&lt;guser&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><p>保存退出。</p><h2 id="完成部署"><a href="#完成部署" class="headerlink" title="完成部署"></a>完成部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g      <span class="comment"># 或者`hexo generate`</span></span><br><span class="line">hexo d      <span class="comment"># 或者`hexo deploy`</span></span><br></pre></td></tr></table></figure><h1 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h1><p>访问地址为<code>https://&lt;guser&gt;.github.io/</code></p><p>完成！！</p><h4 id="注：其他的参考文献未详细记录，但是这篇文章很有帮助。"><a href="#注：其他的参考文献未详细记录，但是这篇文章很有帮助。" class="headerlink" title="注：其他的参考文献未详细记录，但是这篇文章很有帮助。"></a>注：其他的参考文献未详细记录，但是<a href="https://juejin.im/post/5bebfe51e51d45332a456de0" target="_blank" rel="noopener">这篇文章</a>很有帮助。</h4>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web server </tag>
            
            <tag> node.js </tag>
            
            <tag> hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ML】最大似然求解k分类GDA模型</title>
      <link href="academic/%E3%80%90ML%E3%80%91%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E6%B1%82%E8%A7%A3k%E5%88%86%E7%B1%BBGDA%E6%A8%A1%E5%9E%8B/"/>
      <url>academic/%E3%80%90ML%E3%80%91%E6%9C%80%E5%A4%A7%E4%BC%BC%E7%84%B6%E6%B1%82%E8%A7%A3k%E5%88%86%E7%B1%BBGDA%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>GDA</strong>: <strong>G</strong>aussian <strong>D</strong>iscriminant <strong>A</strong>nalysis 高斯判别分析<br><strong>MLE</strong>: <strong>M</strong>aximum <strong>L</strong>ikelihood <strong>E</strong>stimate 最大似然估计</p></blockquote><a id="more"></a><h3 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h3><p>1）假设目标变量$y\in\{0,\cdots,k-1\}$服从$k$项式分布$(\phi_{s}, s = 1,\cdots,k-1)$：</p><script type="math/tex; mode=display">\begin{align}   p(y; \phi_{s}, s = 1,\cdots,k-1) = \prod_{s=0}^{k}\phi_{s}^{ \mathbf{1} \{ y = s \} }  = (1 - \sum_{s=1}^{k-1} \phi_{s})^{1 - \sum_{s=1}^{k-1} \mathbf{1} \{ y = s \} } \cdot \prod_{s=1}^{k-1}\phi_{s}^{ \mathbf{1} \{ y = s \} } \end{align}</script><p>其中$\mathbf{1} \{ \cdot \}$是<strong>指示函数</strong>，满足<script type="math/tex">\mathbf{1} \{ \text{True} \} = 1, \mathbf{1} \{ \text{False} \} = 0</script>。<br>2）假设特征向量对于不同类别均满足Gauss分布，并且有共同的协方差矩阵$\Sigma$：<script type="math/tex">\quad \vec{x}|y = s \ \sim N(\vec{\mu}_{s}, \Sigma), \quad s=0, 1, \cdots, k-1</script> <script type="math/tex">p(\vec{x}|y = s) = \frac{1}{(2\pi)^{\frac{n}{2}}|\Sigma|^{\frac{1}{2}}}\exp{[-\frac{1}{2}(\vec{x}-\vec{\mu}_{s})^{T}\Sigma^{-1}(\vec{x}-\vec{\mu}_{s})]}, \quad s=0, 1, \cdots, k-1</script><br>全部模型参数：$\phi_{s}$，$ \vec{\mu}_{s_{a}}$，$\Sigma$，$s = 1,\cdots,k-1$，$s_{a} = 0,\cdots,k-1$</p><h3 id="对数似然函数"><a href="#对数似然函数" class="headerlink" title="对数似然函数"></a>对数似然函数</h3><script type="math/tex; mode=display">\begin{align}   & l(\phi_{s}, \vec{\mu}_{s_{a}}, \Sigma, s = 1,\cdots,k-1, s_{a} = 0,\cdots,k-1)  \\   =& \log{\prod_{i=1}^{m} p(\vec{x}^{(i)}, y^{(i)}; \phi_{s}, \vec{\mu}_{s_{a}}, \Sigma, s = 1,\cdots,k-1, s_{a} = 0,\cdots,k-1 )} \\   =& \log{\prod_{i=1}^{m} p(\vec{x}^{(i)} | y^{(i)}; \vec{\mu}_{s_{a}}, \Sigma, s_{a} = 0,\cdots,k-1 ) p(y^{(i)}; \phi_{s}, s = 1,\cdots,k-1 )} \\   =& \sum_{i=1}^{m} \log{p(\vec{x}^{(i)} | y^{(i)}; \vec{\mu}_{s_{a}}, \Sigma, s_{a} = 0,\cdots,k-1 )} + \sum_{i=1}^{m} \log{p(y^{(i)}; \phi_{s}, s = 1,\cdots,k-1 )}  \\   =& \sum_{i=1}^{m} \log{\prod_{s_{a}=0}^{k-1} p(\vec{x}^{(i)}|y^{(i)}=j; \vec{\mu}_{s_{a}}, \Sigma)^{\mathbf{1} \{ y^{(i)} = s_{a} \} }} + \sum_{i=1}^{m} \log{p(y^{(i)}; \phi_{s}, s = 1,\cdots,k-1 )} \\   =& \sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} {\mathbf{1} \{ y^{(i)} = s_{a} \} } \log{ p(\vec{x}^{(i)} | y^{(i)}=j; \vec{\mu}_{s_{a}}, \Sigma)} + \sum_{i=1}^{m} \log{p(y^{(i)}; \phi_{s}, s = 1,\cdots,k-1 )} \end{align}</script><h3 id="最大化对数似然函数"><a href="#最大化对数似然函数" class="headerlink" title="最大化对数似然函数"></a>最大化对数似然函数</h3><p>1）对$\phi_{s}, s=1,\cdots,k-1$求偏导：</p><script type="math/tex; mode=display">\begin{align}   & \frac{\partial l(\phi_{s}, \vec{\mu}_{s_{a}}, \Sigma, s = 1,\cdots,k-1, s_{a} = 0,\cdots,k-1) }{\partial \phi_{s}} \\   =& \frac{\partial }{\partial \phi_{s}}\big(\sum_{i=1}^{m} \log{p(y^{(i)}; \phi_{s}, s = 1,\cdots,k-1 )}\big) \\   =& \frac{\partial }{\partial \phi_{s}} \big(\sum_{i=1}^{m} \log{[(1-\sum_{s'=1}^{k-1}\phi_{s'})^{1 - \sum_{s'=1}^{k-1} \mathbf{1} \{ y^{(i)} = {s'} \} } \cdot \prod_{s'=1}^{k-1}\phi_{s'}^{ \mathbf{1} \{ y = s' \} } ]}\big) \\   =& \frac{\partial }{\partial \phi_{s}} \big(\sum_{i=1}^m \big[ (1- \sum_{s'=1}^{k-1}\mathbf{1} \{ y^{(i)} = s' \}) \log{(1 - \sum_{s'=1}^{k-1}\phi_{s'})} + \sum_{s'=1}^{k-1} \mathbf{1} \{ y^{(i)} = s' \} \log{\phi_{s'}} \big] \big) \\   =& \sum_{i=1}^m \big[ (1- \sum_{s'=1}^{k-1} \mathbf{1} \{ y^{(i)} = s' \} )\cdot(1 - \sum_{s'=1}^{k-1}\phi_{s'})^{-1} \cdot (-1) + \mathbf{1} \{ y^{(i)} = s \}\cdot\phi_{s}^{-1} \big] \triangleq 0 \\   & \Rightarrow (1 - \sum_{s'=1}^{k-1}\phi_{s'})^{-1} \cdot \sum_{i=1}^m (1- \sum_{s'=1}^{k-1} \mathbf{1} \{ y^{(i)} = s' \} ) = \phi_{s}^{-1} \cdot \sum_{i=1}^m \mathbf{1} \{ y^{(i)} = s \} \\   & \frac{\phi_{s}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)} = s \}} = \frac{(1 - \sum_{s'=1}^{k-1}\phi_{s'})}{\sum_{i=1}^m (1 - \sum_{s'=1}^{k-1} \mathbf{1} \{ y^{(i)} = s' \} )} = \frac{\phi_{0}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)}=0 \}} \\   & \Rightarrow \qquad\qquad\quad \phi_{s} = \frac{\phi_{0}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)}=0 \}}\sum_{i=1}^m \mathbf{1} \{ y^{(i)} = s \} \qquad\qquad\qquad (\star)\end{align}</script><p>对$s$求和，</p><p>$(\star)$式左$=\sum_{s=0}^{k}\phi_{s}=1$</p><p>$(\star)$式右$= \frac{\phi_{0}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)}=0 \}}\sum_{s=0}^{k}\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s \} = m\cdot\frac{\phi_{0}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)}=0 \}}$</p><p>因此$\frac{\phi_{0}}{\sum_{i=1}^m \mathbf{1} \{ y^{(i)}=0 \}} = \frac{1}{m}$，带入$(\star)$式得到：</p><script type="math/tex; mode=display">\begin{align}   \phi_{s} = \frac{1}{m} \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s \}, \quad s=1,\cdots,k-1\end{align}</script><p>2）对$\vec{\mu}_{s_{a}}, s_{a} = 0,1,\cdots, k-1$求偏导：</p><script type="math/tex; mode=display">\begin{align}   & \frac{\partial l(\phi_{s}, \vec{\mu}_{s_{a}}, \Sigma, s = 1,\cdots,k-1, s_{a} = 0,\cdots,k-1) }{\partial \vec{\mu}_{s_{a}}} \\   =& \frac{\partial}{\partial \vec{\mu}_{s_{a}}} \big( \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s_{a} \} \log{p(\vec{x}^{(i)}|y^{(i)} = s_{a}; \vec{\mu}_{s_{a}}, \Sigma)} \big) \\   =& \frac{\partial}{\partial \vec{\mu}_{s_{a}}} \big( \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s_{a} \} \big[ \log{\frac{1}{(2\pi)^{\frac{n}{2}}|\Sigma|^{\frac{1}{2}}}} - \frac{1}{2}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T}\Sigma^{-1}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}}) \big] \big) \\   =& \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s_{a} \} \big(2\cdot(-\frac{1}{2})\cdot\Sigma^{-1}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})\cdot(-1) \big) \\   =& \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s_{a} \}\Sigma^{-1}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}}) \triangleq 0 \\   & \Rightarrow \qquad \Sigma^{-1}\vec{\mu}_{s_{a}} = \frac{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \}\Sigma^{-1}\vec{x}^{(i)}}{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \} } \\   & \Rightarrow \qquad \vec{\mu}_{s_{a}} = \frac{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \} \vec{x}^{(i)}}{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \} }, \quad  s_{a} = 0,1,\cdots, k-1  \end{align}</script><p>其中分母表示$y^{(i)}$取值为$s$的样本数量，分子表示$y^{(i)}$取值为$s$的样本的$\vec{x}$之和，总体表示这一取值情况的$\vec{x}$的平均值，与预期结果相符。<br>3）对$ \Sigma $求偏导：</p><script type="math/tex; mode=display">\begin{align}   & \frac{\partial l(\phi_{s}, \vec{\mu}_{s_{a}}, \Sigma, s = 1,\cdots,k-1, s_{a} = 0,\cdots,k-1)}{\partial \Sigma} \\   =& \frac{\partial}{\partial\Sigma} \big[\sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \mathbf{1}\{ y^{(i)}= s_{a} \} \log{ p(\vec{x}^{(i)} | y^{(i)} = s_{a}; \vec{\mu}_{s_{a}}, \Sigma)}\big] \\   =& \frac{\partial }{\partial \Sigma} \big[ \sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \mathbf{1} \{ y^{(i)} = s_{a} \}\big( \log{\frac{1}{ (2\pi)^{\frac{n}{2}} |\Sigma|^{\frac{1}{2}} } - \frac{1}{2}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T}\Sigma^{-1}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})} \big) \big] \\   =& -\frac{m}{2} \frac{\partial\log{|\Sigma|}}{\partial\Sigma} -\frac{1}{2} \frac{\partial}{\partial\Sigma} \sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \mathbf{1} \{ y^{(i)} = s_{a} \} (\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T}\Sigma^{-1}(\vec{x}^{(i)} - \vec{\mu}_{s_{a}}) \\   =& -\frac{m}{2}|\Sigma|^{-1} \frac{\partial|\Sigma|}{\partial\Sigma} -\frac{1}{2} \sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \big[ \mathbf{1} \{ y^{(i)} = s_{a} \} (\vec{x}^{(i)} - \vec{\mu}_{s})(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T} \big] \frac{\partial\Sigma^{-1}}{\partial\Sigma} \\   =& -\frac{m}{2}\Sigma^{-1} + \frac{1}{2} \sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \big[ \mathbf{1} \{ y^{(i)} = s_{a} \} (\vec{x}^{(i)} - \vec{\mu}_{s_{a}})(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T} \big]\Sigma^{-2} \triangleq 0 \\   & \Rightarrow \quad \Sigma = \frac{1}{m}\sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \big[ \mathbf{1} \{ y^{(i)} = s_{a} \} (\vec{x}^{(i)} - \vec{\mu}_{s_{a}})(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T} \big] \end{align}</script><p>可以发现这个结果也是符合预期的。</p><h3 id="最佳拟合参数总结"><a href="#最佳拟合参数总结" class="headerlink" title="最佳拟合参数总结"></a>最佳拟合参数总结</h3><script type="math/tex; mode=display">\begin{align}   \phi_{s} =& \frac{1}{m} \sum_{i=1}^{m} \mathbf{1} \{ y^{(i)} = s \}, \quad s=1,\cdots,k-1 \\   \vec{\mu}_{s_{a}} =& \frac{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \} \vec{x}^{(i)}}{\sum_{i=1}^{m}\mathbf{1} \{ y^{(i)} = s_{a} \} }, \quad s_{a}=0,\cdots,k-1  \\   \Sigma =& \frac{1}{m}\sum_{i=1}^{m} \sum_{s_{a}=0}^{k-1} \big[ \mathbf{1} \{ y^{(i)} = s_{a} \} (\vec{x}^{(i)} - \vec{\mu}_{s_{a}})(\vec{x}^{(i)} - \vec{\mu}_{s_{a}})^{T} \big] \end{align}</script>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> theory </tag>
            
            <tag> algorithm </tag>
            
            <tag> machine learning </tag>
            
            <tag> GDA </tag>
            
            <tag> MLE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python爬虫】CentOS7上使用Chrome的无头浏览器</title>
      <link href="tutorial/%E3%80%90Python%E7%88%AC%E8%99%AB%E3%80%91CentOS7%E4%B8%8A%E4%BD%BF%E7%94%A8Chrome%E7%9A%84%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
      <url>tutorial/%E3%80%90Python%E7%88%AC%E8%99%AB%E3%80%91CentOS7%E4%B8%8A%E4%BD%BF%E7%94%A8Chrome%E7%9A%84%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Python反爬，Selenium与Chrome无头浏览器的使用</p></blockquote><a id="more"></a><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>说到Python爬虫，就一定会涉及到“反爬”策略，就会遇到“爬取动态页面元素”的问题，如果目标网站没有其他的反爬措施，那么“动态元素”就是我们这里要解决的唯一难题。而解决的方式就是简单粗暴地想办法模拟人在浏览器上操作，进而触发相应动态元素的加载，也就指向了强大的<code>Selenium</code>。</p><p>众所周知，<code>Chrome</code>是Google家的浏览器，在2007年开始推出了自己的无头模式。而我们曾经熟悉的<code>PhantomJS</code>却在之后不再被<code>Selenium</code>所支持（目前只支持<code>Chrome</code>和<code>Firefox</code>的无头模式，据说这是一种大厂效应23333）。在<code>MacOS</code>下，坑会少一些，但放在我的服务器上坑就多了起来。</p><p>注：以下配置过程请在非<code>root</code>用户账号下完成。</p><h1 id="1-安装chrome"><a href="#1-安装chrome" class="headerlink" title="1. 安装chrome"></a>1. 安装<code>chrome</code></h1><h2 id="1-1-添加repo源"><a href="#1-1-添加repo源" class="headerlink" title="1.1 添加repo源"></a>1.1 添加<code>repo</code>源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/yum.repos.d/google.repo</span><br></pre></td></tr></table></figure><p>在打开的空文件中填入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[google]</span><br><span class="line">name=Google-x86_64</span><br><span class="line">baseurl=http://dl.google.com/linux/rpm/stable/x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub</span><br></pre></td></tr></table></figure></p><h2 id="1-2-yum安装"><a href="#1-2-yum安装" class="headerlink" title="1.2 yum安装"></a>1.2 <code>yum</code>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install google-chrome-stable</span><br></pre></td></tr></table></figure><h1 id="2-安装chromedriver"><a href="#2-安装chromedriver" class="headerlink" title="2. 安装chromedriver"></a>2. 安装<code>chromedriver</code></h1><h2 id="2-1-查看chrome的版本"><a href="#2-1-查看chrome的版本" class="headerlink" title="2.1 查看chrome的版本"></a>2.1 查看<code>chrome</code>的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-chrome --version</span><br></pre></td></tr></table></figure><h2 id="2-2-下载chromedriver"><a href="#2-2-下载chromedriver" class="headerlink" title="2.2 下载chromedriver"></a>2.2 下载<code>chromedriver</code></h2><p>请注意<code>chrome</code>和<code>chromedriver</code>的区别，前者是浏览器，后者是其驱动，而二者缺一不可。推荐在<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" target="_blank" rel="noopener">官网</a>下载最新的<code>chromedriver</code>，如果没有“梯子”，<a href="http://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">这里</a>也有各个版本的<code>chromedriver</code>，而你要选择的版本要与你的<code>chrome</code>版本对应（如<code>ChromeDriver 2.46</code> 支持 <code>Chrome v71-73</code>）。</p><h2 id="2-3-添加至环境变量-PATH"><a href="#2-3-添加至环境变量-PATH" class="headerlink" title="2.3 添加至环境变量$PATH"></a>2.3 添加至环境变量<code>$PATH</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>打开后在适当的位置添加：<br>（假设你把<code>chromedriver</code>放到了<code>/home/xxx/drivers/bin/</code>目录下）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/home/xxx/drivers/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>在<code>CentOS</code>中，更推荐在最后<code>export PATH</code>，而前面加上一行赋值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/home/xxx/drivers/bin</span><br></pre></td></tr></table></figure></p><p>这两种方式在作用上是完全等价的。</p><h1 id="3-安装selenium"><a href="#3-安装selenium" class="headerlink" title="3. 安装selenium"></a>3. 安装<code>selenium</code></h1><p><code>selenium</code>可以在你项目的虚拟环境中简单地用<code>pip</code>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install selenium</span><br></pre></td></tr></table></figure></p><h1 id="4-脚本测试"><a href="#4-脚本测试" class="headerlink" title="4. 脚本测试"></a>4. 脚本测试</h1><figure class="highlight python"><figcaption><span>test_headless.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">DRIVER_PATH = <span class="string">'/home/xxx/drivers/bin/chromedriver'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 设置浏览器</span></span><br><span class="line">    options = Options()</span><br><span class="line">    options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">    options.add_argument(<span class="string">'--headless'</span>)  <span class="comment"># 无头参数</span></span><br><span class="line">    options.add_argument(<span class="string">'--disable-gpu'</span>)</span><br><span class="line">    <span class="comment"># 启动浏览器</span></span><br><span class="line">    driver = Chrome(executable_path=DRIVER_PATH, options=options)</span><br><span class="line">    <span class="comment"># 访问目标URL</span></span><br><span class="line">    driver.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">    print(driver.page_source)</span><br><span class="line">    driver.close()</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>注意，这里的<code>--no-sandbox</code>和<code>--headless</code>是必须的，而且必须按照<code>--no-sandbox</code>在最前面的顺序，否则会报一些非常摸不着头脑的<a href="https://stackoverflow.com/questions/50642308/org-openqa-selenium-webdriverexception-unknown-error-devtoolsactiveport-file-d" target="_blank" rel="noopener">错误</a>（这就是最坑的地方）。</p><p>希望看到这篇文章的你能解决想要解决的问题。</p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS7 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> Selenium </tag>
            
            <tag> Chrome无头浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【后端】云主机配置微信公众号后台全记录</title>
      <link href="tutorial/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91%E4%BA%91%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E5%85%A8%E8%AE%B0%E5%BD%95/"/>
      <url>tutorial/%E3%80%90%E5%90%8E%E7%AB%AF%E3%80%91%E4%BA%91%E4%B8%BB%E6%9C%BA%E9%85%8D%E7%BD%AE%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E5%8F%B0%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>技术栈：CentOS7/Python3/Flask/Nginx/Gunicorn/WeRoBot/Systemd</p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在天秤座的纠结性格反复权衡后，最终我还是拥有了自己的第一个个人云主机。我这里选择的是“阿里云学生专享服务器”，在做学生的最后一年有幸享受到9.5/月的优惠价格，还是要感谢阿里爸爸的关爱！选择阿里云的原因没有什么可供参考的，主要是因为我比较信赖阿里系的产品。</p><p>系统我选择了比较稳定的CentOS 7.3 64位。以下是一些关键参数信息：</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作系统</th><th style="text-align:center">CPU</th><th style="text-align:center">内存</th><th style="text-align:center">带宽</th></tr></thead><tbody><tr><td style="text-align:center">CentOS 7.3 64位</td><td style="text-align:center">1核</td><td style="text-align:center">2GB</td><td style="text-align:center">1Mbps</td></tr></tbody></table></div><p>以下我将详细记录我这次云主机的配置过程，一来是熟悉一下CentOS系统，二来是试用云主机。相信这次经历会让我学到很多东西。</p><h1 id="阅读指南"><a href="#阅读指南" class="headerlink" title="阅读指南"></a>阅读指南</h1><h2 id="预备资源"><a href="#预备资源" class="headerlink" title="预备资源"></a>预备资源</h2><ol><li>拥有一台CentOS系统的服务器或计算机</li><li>良好的网络</li><li>至少有一种已会使用的编辑器（本文中使用<code>vim</code>）<h2 id="预备技能"><a href="#预备技能" class="headerlink" title="预备技能"></a>预备技能</h2></li><li>基本的Linux系统操作能力</li><li>基本的Python3编程技能</li><li>对“管理员权限”、“虚拟环境”、“包管理”、“网络代理”等概念有基本认识</li></ol><h1 id="配置过程-1-6"><a href="#配置过程-1-6" class="headerlink" title="配置过程$^{[1-6]}$"></a>配置过程<a href="#参考资料">$^{[1-6]}$</a></h1><h2 id="0-创建新用户"><a href="#0-创建新用户" class="headerlink" title="0. 创建新用户"></a>0. 创建新用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adduser &lt;user_name&gt;                        <span class="comment"># 创建新用户&lt;user_name&gt;</span></span><br><span class="line">passwd &lt;user_name&gt;                         <span class="comment"># 设置新用户的密码</span></span><br><span class="line">usermod -aG wheel &lt;user_name&gt;              <span class="comment"># 使&lt;user_name&gt;获得sudo权限</span></span><br><span class="line">su &lt;user_name&gt;                             <span class="comment"># 切换至用户&lt;user_name&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>(1) “<code>&lt;user_name&gt;</code>”替换成你实际的项目名称；<br>(2) 你会发现，非<code>root</code>用户的主目录是<code>/home</code>的子目录。<br>(3) 设置密码的步骤<strong>是</strong>必须的。</p><h2 id="1-更新包管理器yum及安装相关工具包"><a href="#1-更新包管理器yum及安装相关工具包" class="headerlink" title="1. 更新包管理器yum及安装相关工具包"></a>1. 更新包管理器<code>yum</code>及安装相关工具包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update                            <span class="comment"># 更新yum</span></span><br><span class="line">sudo yum install yum-utils                 <span class="comment"># 安装yum-utils</span></span><br><span class="line">sudo yum groupinstall development          <span class="comment"># 一并安装一系列常用包</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>(1) 由于是个人使用，在<code>root</code>账号下，以下的<code>sudo</code>命令其实都是不必需的；<br>(2) <code>yum</code>是类似于<code>Ubuntu</code>下<code>apt-get</code>般的存在；<br>(3) 尽管CentOS下shell的命令提示符为<code>#</code>，但为了此处不与Markdown的记号冲突，我会始终使用<code>$</code>。[2020-07-14修改]然而现在我发现markdown的bash代码段是会自动高亮一些常用的shell命令，添加<code>$</code>会导致这些高亮不可用，因此现在博文中的代码块内将不再标注任何命令提示符。<br><strong>说明：此步骤无报错。每个命令运行成功输出内容均以“Complete!”结尾，中间遇到的确认一律yes(输入<code>y</code>)，当然你也可以选择对于每一个<code>yum</code>命令添加<code>-y</code>参数，就会一路yes自动安装下去了，下同。</strong></p><h2 id="2-安装Python3"><a href="#2-安装Python3" class="headerlink" title="2. 安装Python3"></a>2. 安装Python3</h2><h3 id="2-1-基础安装"><a href="#2-1-基础安装" class="headerlink" title="2.1 基础安装"></a>2.1 基础安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install https://centos7.iuscommunity.org/ius-release.rpm  <span class="comment"># 安装IUM repo</span></span><br><span class="line">sudo yum install python36u                 <span class="comment"># 安装Python3.6</span></span><br><span class="line">sudo yum install python36u-pip             <span class="comment"># 安装pip包管理</span></span><br><span class="line">sudo yum install python36u-devel           <span class="comment"># 安装其他相关开发包</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>(1) 执行<code>python3.6 -V</code> 在2019.2.19的结果是Python 3.6.7；<br>(2) 此时如果使用<code>which python3</code>或<code>which pip3</code>均会报错，因为它们的实际名字分别是<code>python3.6</code>和<code>pip3.6</code>；<br>(3) 如果你是用其他方式安装的Python3，那么这里你可能会遇到文件冲突（尤其是当Python3的版本不一致的时候）；<br>(4) 不推荐源码编译安装（除非你是娴熟的老司机）。<br><strong>说明：此步骤无报错。</strong></p><h3 id="2-2-软-链接python3和pip3"><a href="#2-2-软-链接python3和pip3" class="headerlink" title="2.2 (软)链接python3和pip3"></a>2.2 (软)链接<code>python3</code>和<code>pip3</code></h3><p>好了，对于在MacOS已经习惯使用<code>python3</code>和<code>pip3</code>这样的命令的我们来说，每次都要写<code>3.6</code>未免也太臃肿了（简单估算一下是要多28.6%的敲击频率），而且一些代码也需要额外做调整，费时费力。我们可以使用<code>ln</code>来创建(软)链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/bin/python3.6 /usr/bin/python3  <span class="comment"># (软)链接python3</span></span><br><span class="line">$ ln -s /usr/bin/pip3.6 /usr/bin/pip3        <span class="comment"># (软)链接pip3</span></span><br></pre></td></tr></table></figure></p><p>这样我们就可以自由地使用<code>python3</code>和<code>pip3</code>了。<br><strong>注意：</strong><br>(1) 关于<code>ln</code>命令：在不同的目录，用到相同的文件时，不需要在每一个目录下都放一个必须相同的文件，只须在某个固定的目录，放上该文件，然后在其它的目录下用<code>ln</code>命令链接它就可以，不必重复地占用磁盘空间。这里只是把它用成类似<code>alias</code>的功能。<br>(2) 随手可以把<code>pip</code>更新到最新版本（不过这里其实不需要完成更新，因为在虚拟环境中如希望使用最新版本<code>pip</code>，需要在虚拟环境中更新）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade pip                 <span class="comment"># 将pip更新至最新</span></span><br></pre></td></tr></table></figure></p><h2 id="3-创建虚拟环境"><a href="#3-创建虚拟环境" class="headerlink" title="3. 创建虚拟环境"></a>3. 创建虚拟环境</h2><p>创建虚拟环境的目的是保证业务独立，各依赖库版本控制不受其他项目影响。<br>Python3中内置了<code>venv</code>模块来创建虚拟环境。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &lt;project_name&gt; &amp;&amp; <span class="built_in">cd</span> &lt;project_name&gt;  <span class="comment"># 创建并进入&lt;project_name&gt;目录</span></span><br><span class="line">python3 -m venv &lt;venv_name&gt;                <span class="comment"># 创建名为&lt;venv_name&gt;的虚拟环境</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>(1) “<code>&lt;project_name&gt;</code>”替换成你实际的项目名称，“<code>&lt;venv_name&gt;</code>”替换成你实际的虚拟环境名称；<br>(2) 激活虚拟环境见4.2小节，（在激活状态下）退出虚拟环境使用命令<code>deactivate</code>；<br>(3) 有两种方案，第一种就是像这里给出的将虚拟环境相关文件的目录设在所需项目中（项目导向）；第二种你可以在主目录下创建目录<code>venvs</code>，然后将所有的虚拟目录创建在其下（文件管理导向）。<br>(4) 以下内容如无特别说明，执行的系统命令都在<code>~/&lt;project_name&gt;/</code>目录中。</p><h2 id="4-搭建服务器"><a href="#4-搭建服务器" class="headerlink" title="4. 搭建服务器"></a>4. 搭建服务器</h2><h3 id="4-1-安装服务器配置所需的工具"><a href="#4-1-安装服务器配置所需的工具" class="headerlink" title="4.1 安装服务器配置所需的工具"></a>4.1 安装服务器配置所需的工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gcc uwsgi nginx</span><br></pre></td></tr></table></figure><h3 id="4-2-在虚拟环境中安装Python程序依赖的第三方库"><a href="#4-2-在虚拟环境中安装Python程序依赖的第三方库" class="headerlink" title="4.2 在虚拟环境中安装Python程序依赖的第三方库"></a>4.2 在虚拟环境中安装Python程序依赖的第三方库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/&lt;project_name&gt;/&lt;venv_name&gt;/bin/activate   <span class="comment"># 激活虚拟环境&lt;venv_name&gt;</span></span><br><span class="line">pip3 install requests beautifulsoup4 lxml flask gunicorn werobot cryptography</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>(1) 以上Pypi安装的库中：<br><code>requests</code>，<code>beautifulsoup4</code>和<code>lxml</code>：爬虫业务相关（非必需），<br><code>flask</code>：所采用的Web框架（非必需），<br><code>gunicorn</code>：是一个高性能的Python WSGI UNIX HTTP服务器（必需），<br><code>werobot</code>：此处开发微信公众号的核心库（必需），<br><code>cryptography</code>：当你在微信后台基本配置选择的消息传输方式是“兼容模式”或“安全模式”时，WeRoBot所需要的密码库（推荐，非必需）。<br>(2) 似乎CentOS7系统自带了<code>nginx</code>，因为后来我<code>which nginx</code>得到的是<code>/usr/sbin/nginx</code>，而其他通过<code>yum</code>安装的命令工具都在<code>/usr/bin/</code>下。<br><strong>说明：此步骤无报错。<code>cryptography</code>库是我后来调试时根据异常信息后才知道要安装的。另外，假如你没有将<code>pip</code>更新到最新，会看到提示信息：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You are using pip version 9.0.1, however version 19.0.2 is available.</span><br><span class="line">You should consider upgrading via the &apos;pip install --upgrade pip&apos; command.</span><br></pre></td></tr></table></figure></p><p><strong>强迫症都会更新的。</strong></p><h3 id="4-3-配置Nginx反向代理"><a href="#4-3-配置Nginx反向代理" class="headerlink" title="4.3 配置Nginx反向代理"></a>4.3 配置Nginx反向代理</h3><h4 id="4-3-1-创建项目的Nginx配置文件"><a href="#4-3-1-创建项目的Nginx配置文件" class="headerlink" title="4.3.1 创建项目的Nginx配置文件"></a>4.3.1 创建项目的Nginx配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/conf.d/&lt;project_name&gt;.conf   <span class="comment"># 创建项目所需的nginx配置文件</span></span><br></pre></td></tr></table></figure><p>在所打开的空文件中完成监听及反向代理的配置（没有注释的部分我也还不太懂，按照Flask官网教程写的），<code>:wq</code>保存关闭。<br><figure class="highlight nginx"><figcaption><span><project_name>.conf</project_name></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> &lt;我的ECS公网ip&gt;;               <span class="comment"># 有域名的朋友这里填域名</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log;    <span class="comment"># 设置正常通信日志</span></span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/error.log;      <span class="comment"># 设置报错日志</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> /&lt;project_name&gt;/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>         http://127.0.0.1:8000; <span class="comment"># 反向代理Gunicorn本地的服务地址</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>     <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Real-IP           <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   Host                <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-For     <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>   X-Forwarded-Proto   <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-3-2-启动Nginx服务"><a href="#4-3-2-启动Nginx服务" class="headerlink" title="4.3.2 启动Nginx服务"></a>4.3.2 启动Nginx服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><p>每当你修改任意的Nginx配置文件后，都需要重启<code>nginx</code>来使配置生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong><br>(1) “<code>&lt;project_name&gt;</code>”替换成你实际的项目名称，“&lt;我的ECS公网ip&gt;”替换成你的公网ip或外部域名；<br>(2) 查看Nginx状态使用命令<code>sudo systemctl status nginx</code>；要停止Nginx服务，使用<code>sudo service nginx stop</code>。<br><strong>说明：这个地方卡了我很长的时间，由于是第一次部署服务器和第一次开发微信公众号，甚至定位问题出现在这里都费了很多工夫。特别要注意配置文件中<code>server_name</code>和<code>location</code>这里，参看<a href="http://nginx.org/en/docs/http/server_names.html" target="_blank" rel="noopener">Nginx: Server names</a>，特别是当查看Nginx状态时遇到<code>suspicious symbol</code>的异常时。</strong><br>(3) [2019-05-20补充] 即使在<code>/etc/nginx/conf.d</code>中，也不要重复设置<code>server</code>，尤其是同一个ip，否则会造成地址冲突，导致服务启动失败。（这里的2条补充是由于我遇到了修改nginx后无法恢复公众号服务的问题）<br>(4) [2019-05-20补充] <code>sudo nginx -t</code>用来检查你的配置文件是否正确。每次更新nginx配置文件后，要在<code>restart</code>和<code>enable</code>前使配置重新加载<code>sudo nginx -s reload</code>。如果你做了以上这些仍然无法恢复你的项目，尝试去腾讯微信公众平台去<strong>“停用”</strong>并重新<strong>“启用”</strong>服务器配置。</p><h3 id="4-4-部署一个”Hello-World-”的Flask-WeRoBot项目"><a href="#4-4-部署一个”Hello-World-”的Flask-WeRoBot项目" class="headerlink" title="4.4 部署一个”Hello World!”的Flask-WeRoBot项目"></a>4.4 部署一个”Hello World!”的Flask-WeRoBot项目</h3><h4 id="4-4-1-创建一个robot-py，用来管理你的机器人（自动回复程序）"><a href="#4-4-1-创建一个robot-py，用来管理你的机器人（自动回复程序）" class="headerlink" title="4.4.1 创建一个robot.py，用来管理你的机器人（自动回复程序）"></a>4.4.1 创建一个<code>robot.py</code>，用来管理你的机器人（自动回复程序）</h4><figure class="highlight python"><figcaption><span>robot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werobot <span class="keyword">import</span> WeRoBot</span><br><span class="line"></span><br><span class="line">robot = WeRoBot(</span><br><span class="line">    token=<span class="string">'&lt;我的令牌&gt;'</span>,  </span><br><span class="line">    encoding_aes_key=<span class="string">'&lt;我的消息加解密密钥&gt;'</span>, </span><br><span class="line">    app_id=<span class="string">'&lt;我的开发者ID&gt;'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@robot.handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(message)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>token</code>和<code>encoding_aes_key</code>务必与微信公众平台设置的“<strong>令牌(Token)</strong>”和“<strong>消息加解密密钥(EncodingAESKey)</strong>”保持一致（前者是自定义的，后者是提交服务器设置时微信那边随机生成的）<br><strong>说明：在WeRobot的官方文档和很多网上博客资料的“Hello World”中没有强调<code>encoding_aes_key</code>参数，因为他们默认在微信公众平台设置选择的是“明文模式”。</strong></p><h4 id="4-4-2-创建一个app-py，作为主应用程序"><a href="#4-4-2-创建一个app-py，作为主应用程序" class="headerlink" title="4.4.2 创建一个app.py，作为主应用程序"></a>4.4.2 创建一个<code>app.py</code>，作为主应用程序</h4><figure class="highlight python"><figcaption><span>app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> robot <span class="keyword">import</span> robot</span><br><span class="line"><span class="keyword">from</span> werobot.contrib.flask <span class="keyword">import</span> make_view</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.add_url_rule(rule=<span class="string">'/&lt;project_name&gt;/'</span>,        <span class="comment"># WeRoBot挂载地址</span></span><br><span class="line">                 endpoint=<span class="string">'werobot'</span>,             <span class="comment"># Flask的endpoint</span></span><br><span class="line">                 view_func=make_view(robot),</span><br><span class="line">                 methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><code>rule</code>参数的值结尾处的<code>/</code>必须有，因为要同Nginx配置信息以及微信设置的URL保持一致。</p><h3 id="4-5-启动Gunicorn服务器"><a href="#4-5-启动Gunicorn服务器" class="headerlink" title="4.5 启动Gunicorn服务器"></a>4.5 启动Gunicorn服务器</h3><h4 id="4-5-1-尝试启动Gunicorn服务器"><a href="#4-5-1-尝试启动Gunicorn服务器" class="headerlink" title="4.5.1 尝试启动Gunicorn服务器"></a>4.5.1 尝试启动Gunicorn服务器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 最简单的命令方式（默认绑定的是127.0.0.1:8000）</span></span><br><span class="line">gunicorn app:app</span><br><span class="line"><span class="comment"># 或者设置一些参数的方式</span></span><br><span class="line">gunicorn -w 3 -b 127.0.0.1:8000 app:app</span><br></pre></td></tr></table></figure><p>这时你的终端就会显示服务器的监听状态，类似于下面这样：<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16859</span>] [INFO] Starting gunicorn <span class="number">19.9</span><span class="number">.0</span></span><br><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16859</span>] [INFO] Listening at: http:<span class="comment">//127.0.0.1:8000 (16859)</span></span><br><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16859</span>] [INFO] Using worker: sync</span><br><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16862</span>] [INFO] Booting worker with pid: <span class="number">16862</span></span><br><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16863</span>] [INFO] Booting worker with pid: <span class="number">16863</span></span><br><span class="line">[<span class="meta">2019-02-28 12:13:54 +0800</span>] [<span class="number">16864</span>] [INFO] Booting worker with pid: <span class="number">16864</span></span><br></pre></td></tr></table></figure></p><p>然后打开网页浏览器，输入url：<code>http://&lt;我的ECS公网ip&gt;/&lt;project_name&gt;/</code>，如果你看到一个中心标题为“这是一个WeRoBot应用”的页面而非“404”、“502”这种错误页面，说明你的服务器启动成功了（Nginx反代理也设置正确了）。退出<code>Control + c</code>。</p><h4 id="4-5-2-创建WSGI入口文件"><a href="#4-5-2-创建WSGI入口文件" class="headerlink" title="4.5.2 创建WSGI入口文件"></a>4.5.2 创建WSGI入口文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim wsgi.py</span><br></pre></td></tr></table></figure><p>文件内容如下：<br><figure class="highlight python"><figcaption><span>wsgi.pi</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure></p><p>这个文件存在的意义是业务逻辑分离。<br>现在启动Gunicorn服务器就变为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gunicorn wsgi:app </span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">gunicorn -w 3 -b 127.0.0.1:8000 wsgi:app</span><br></pre></td></tr></table></figure></p><h2 id="5-完成微信公众平台设置"><a href="#5-完成微信公众平台设置" class="headerlink" title="5. 完成微信公众平台设置"></a>5. 完成微信公众平台设置</h2><p>这里默认你已经完成了微信公众号的申请。<br>登录微信公众平台后，在左侧下方找到 <strong>开发</strong> &gt;&gt; <strong>基本配置</strong> &gt;&gt; <strong>修改配置</strong>，然后填写服务器信息，根据本文的上下文约定，填写的内容应该符合这个格式：</p><div class="table-container"><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">URL</td><td style="text-align:center">http://&lt;我的ECS公网ip&gt;/<project_name>/</project_name></td></tr><tr><td style="text-align:center">Token</td><td style="text-align:center">&lt;我的令牌&gt;</td></tr><tr><td style="text-align:center">EncodingAESKey</td><td style="text-align:center">操作：选择随机生成</td></tr><tr><td style="text-align:center">消息加解密方式</td><td style="text-align:center">操作：选择安全(或明文/兼容)模式</td></tr></tbody></table></div><p>随后点击<strong>提交</strong>完成设置。<br><strong>注意：</strong>在点击<strong>提交</strong>前请确定服务器已启动。EncodingAESKey处的字符串对应上文中的“<strong>&lt;我的消息加解密密钥&gt;</strong>”</p><h2 id="6-创建Systemd-Unit-File"><a href="#6-创建Systemd-Unit-File" class="headerlink" title="6. 创建Systemd Unit File"></a>6. 创建Systemd Unit File</h2><p>这个是为了在CentOS系统重启后自动启动我们的Gunicorn服务器以恢复Flask项目，同时在后台守护Gunicorn运行的进程（也就是说即使你登出后依然保持运行状态）。我们只需要创建相应的服务文件(<code>.service</code>)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/&lt;project_name&gt;.service</span><br></pre></td></tr></table></figure></p><p>添加文件如下内容保存退出。<br><figure class="highlight plain"><figcaption><span><project_name>.service</project_name></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gunicorn instance to serve &lt;project_name&gt;</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=&lt;user_name&gt;</span><br><span class="line">Group=nginx</span><br><span class="line">WorkingDirectory=/home/&lt;user_name&gt;/&lt;project_name&gt;</span><br><span class="line">Environment=&quot;PATH=/home/&lt;user_name&gt;/&lt;project_name&gt;/&lt;venv_name&gt;/bin&quot;</span><br><span class="line">ExecStart=/home/&lt;user_name&gt;/&lt;project_name&gt;/&lt;venv_name&gt;/bin/gunicorn --workers 3 --bind 127.0.0.1:8000 wsgi:app</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p><p>接下来启动我们的<code>&lt;project_name&gt;</code>服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload             <span class="comment"># 使服务文件生效</span></span><br><span class="line">sudo systemctl start &lt;project_name&gt;      <span class="comment"># 启动&lt;project_name&gt;服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> &lt;project_name&gt;     <span class="comment"># 使&lt;project_name&gt;服务可用</span></span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>查看状态使用命令<code>sudo systemctl status &lt;project_name&gt;</code>；停止服务使用<code>sudo service &lt;project_name&gt; stop</code>。<br><strong>说明：我们这里不采用其他文档或资料中提到的守护程序Supervisor，因为CentOS7自带的systemd足够强大易用，省去了安装新工具的麻烦（也节省了空间）。</strong></p><h2 id="7-测试"><a href="#7-测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><p>进入公众号回复任意消息，如果一切顺利的话，你将收到文本消息“Hello World!”<br><strong>大功告成！</strong><br>后续就是移植旧功能，开发新功能，并且逐步迭代优化的过程了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>常言道，“生命在于折腾”，历经1周的探索尝试，包括到Github提issue寻求帮助，咨询阿里云的工程师，联系腾讯客服，搜索浏览上百个链接，终于成功将服务器跑起来，很开心！也完成了这篇记录，给自己留下一个见证，如果这篇文章能够帮助到你那就更好了！也请点个“喜欢”，让我知道探索技术的道路上并不孤独，也让我知道能帮你少走了弯路！完结撒花~</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1] <a href="https://janikarhunen.fi/how-to-install-python-3-6-1-on-centos-7" target="_blank" rel="noopener">How-to install Python 3.6.1 on CentOS 7</a><br>[2] <a href="http://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask中文文档</a><br>[3] <a href="https://werobot.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">WeRoBot官方文档</a><br>[4] <a href="https://shanguangyu.com/articles/wechat-ECS/" target="_blank" rel="noopener">阿里云ECS搭建微信公众平台</a><br>[5] <a href="https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-centos-7" target="_blank" rel="noopener">How To Serve Flask Applications with Gunicorn and Nginx on CentOS 7</a><br>[6] <a href="https://bartsimons.me/gunicorn-as-a-systemd-service/" target="_blank" rel="noopener">Gunicorn as a SystemD service</a></p>]]></content>
      
      
      <categories>
          
          <category> tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web server </tag>
            
            <tag> python3 </tag>
            
            <tag> nginx </tag>
            
            <tag> gunicorn </tag>
            
            <tag> WeRobot </tag>
            
            <tag> systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DM】WIMP</title>
      <link href="academic/%E3%80%90DM%E3%80%91WIMP/"/>
      <url>academic/%E3%80%90DM%E3%80%91WIMP/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于WIMP的理论模型推导</p></blockquote><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>WIMP</strong>是弱相互作用大质量粒子(<strong>W</strong>eakly <strong>I</strong>nteracting <strong>M</strong>assive <strong>P</strong>article)的简称，它是目前最流行、最被看好的暗物质粒子候选者，也是宇宙学$\Lambda\text{CDM}$模型中的冷暗物质成分，具有稳定性、电磁中性、色中性和非相对论性。它的质量量级被估计在$10^2\text{GeV}/c^2$左右，而目前的粒子加速器仍没有能力达到这个能量尺度。</p><h2 id="早期宇宙与WIMP热遗迹"><a href="#早期宇宙与WIMP热遗迹" class="headerlink" title="早期宇宙与WIMP热遗迹"></a>早期宇宙与WIMP热遗迹</h2><p>尽管目前加速器对产生WIMP还无能为力，但是宇宙作为一个天然的巨型实验室，(根据大爆炸宇宙学模型)在早期是有足够高的能量来产生WIMPs。随着宇宙的膨胀降温，这个产生过程一直持续到温度能标低于WIMP的质量的时刻。由于暗物质一直存在至今，说明它在宇宙中是很稳定的（最轻的暗物质粒子没有进一步衰变成标准模型粒子），因而唯一能让它数量发生改变的过程就是暗物质粒子相互湮灭（当然这里已经<strong>假设WIMPs</strong>彼此之间<strong>可以发生湮灭, 即$\chi$是Majorana粒子</strong>）</p><script type="math/tex; mode=display">\begin{align}  \chi+\chi\rightarrow \text{SM}+\text{SM}\end{align}</script><p>湮灭事例率$\Gamma$与湮灭截面$\sigma_{\text{ann}}$，相对运动速率$v$和WIMP数密度$n_\chi$相关:</p><script type="math/tex; mode=display">\begin{align}  \Gamma = \langle\sigma_{\text{ann}}v\rangle n_\chi\end{align}</script><p>（假设在宇宙原初热浴时期WIMP与整个体系是热平衡的）这个湮灭过程会带来粒子数密度的变化，而描绘这个粒子数密度非平衡态过程的Boltzmann方程<a href="#ref_1">$^{[1]}$</a>为 </p><script type="math/tex; mode=display">\begin{align}  a^{-3}\frac{\text{d}(n_\chi a^3)}{\text{d}t} = \langle\sigma_{\text{ann}}v\rangle[(n^0_\chi)^2 - (n_\chi)^2]\end{align}</script><p>其中$a$是宇宙尺度因子，上角标“$^0$”表示热平衡时的值，有的文献(例如<a href="#ref_2">[2]</a>)中也会将Boltzmann方程写成 </p><script type="math/tex; mode=display">\begin{align}  \frac{\text{d}n_\chi}{\text{d}t} + 3Hn_\chi = - \langle\sigma_{\text{ann}}v\rangle[(n_\chi)^2 - (n^0_\chi)^2]\end{align}</script><p>其中$H$为Hubble常数。显见这两个表达式是完全等价的<a href="#appendix_1">$^1$</a>。</p><p>随着(早期)宇宙的继续膨胀，可以由上式看出$n_\chi$在不断变小，使得WIMP湮灭过程越来越难以进行，换言之暗物质粒子碰撞几率持续下降。直至当湮灭事例率达到宇宙膨胀速率水平的时候($\Gamma \simeq H$)，碰撞几率为$0$，这个过程被“冻结”了(thermal freeze-out)而产生了所谓<strong>热遗迹(thermal relic)</strong>，这之后WIMP的<strong>共动数密度</strong>(yield, or comoving number density)$Y_\chi = \cfrac{n_\chi}{s}$就近似为常数值<a href="#appendix_2">$^2$</a>了，暗物质粒子$\chi$从其他粒子组分中<strong>退耦</strong>，此时的温度称为冻结温度$T_f$。根据热力学，热平衡下各种类粒子数密度，能量密度和熵密度为<a href="#appendix_3">$^3$</a>：</p><script type="math/tex; mode=display">\begin{align}  n=g\int\frac{\text{d}^3\vec{p}}{(2\pi)^3}f(\vec{p}), \quad \rho=g\int\frac{\text{d}^3\vec{p}}{(2\pi)^3}f(\vec{p})E(\vec{p}), \quad s=\frac{\rho+P}{T}\end{align}</script><p>由于暗物质是的非相对论性而且散射截面不是很大，所以整个退耦过程仍处在宇宙早期，而早期宇宙以辐射为主导，其物态方程为<a href="#appendix_4">$^4$</a> </p><script type="math/tex; mode=display">\begin{align}  \rho=3P\end{align}</script><p>我们得到早期宇宙的主要物理参量</p><script type="math/tex; mode=display">\begin{align}  n=g_*\frac{\xi(3)}{\pi^2}T^3, \quad \rho=g_*(\frac{\pi^2}{30})T^4, \quad s=g_{*s}(\frac{2\pi^2}{45})T^3\end{align}</script><p>其中$g_*,g_{*s}$称为有效零质量自由度（我们的推导中用到了零质量(相对论性)和零化学势的条件）<a href="#appendix_5">$^5$</a>：</p><script type="math/tex; mode=display">\begin{align}  g_* = \sum_{i=\text{bosons}}g_i\Big(\frac{T_i}{T}\Big)^4 +\frac{7}{8}\sum_{i=\text{fermions}}g_i\Big(\frac{T_i}{T}\Big)^4 \\   g_{*s} = \sum_{i=\text{bosons}}g_i\Big(\frac{T_i}{T}\Big)^3 +\frac{7}{8}\sum_{i=\text{fermions}}g_i\Big(\frac{T_i}{T}\Big)^3\end{align}</script><p>考虑到相对论粒子为光子和三种中微子（都是两种自旋方式），$g_*=2+6\cdot\cfrac{7}{8}(\cfrac{T_\nu}{T_\gamma})^4$，$g_{*s}=2+6\cdot\cfrac{7}{8}(\cfrac{T_\nu}{T_\gamma})^3$，热平衡时有$T_\nu=T_\gamma$，因此$g_*=g_{*s}=7.25$。</p><p>随着宇宙能量密度降低，物质开始进入非相对论状态，引入变量$x=\cfrac{m_{\chi}}{T}$，在退耦时刻之后的WIMP平衡态数密度为(采用Maxwell-Boltzmann分布近似<a href="#appendix_6">$^6$</a>)：</p><script type="math/tex; mode=display">\begin{align}  n_\chi^0 = \int\frac{\text{d}^3\vec{p}}{(2\pi)}e^{-\frac{E}{T}} = e^{-\frac{m_\chi}{T}}\Big(\frac{m_\chi T}{2\pi}\Big)^{\frac{3}{2}} = e^{-x}\frac{m_\chi^3}{(2\pi x)^{\frac{3}{2}}}\end{align}</script><p>可以发现，对于$\chi$粒子，当$T\ll m_\chi$时平衡态粒子数密度$n_\chi^0\sim T^3$；当$T\gg m_\chi$时平衡态粒子数密度$n_\chi^0\sim T^\frac{3}{2}e^{-\frac{m_\chi}{T}}$。平衡态时共动数密度(设WIMP$g_*=1$) </p><script type="math/tex; mode=display">\begin{align}  Y_\chi^0 = \frac{n_\chi^0}{s} = \frac{1}{g_*}\frac{45}{2\pi^2}\Big(\frac{x}{2\pi}\Big)^{\frac{3}{2}} \approx0.145x^{\frac{3}{2}}e^{-x}\end{align}</script><p>考虑到熵守恒假设，并且将变元$(n_\chi,t)$转换为$(Y_\chi,x)$，前述Boltzmann方程化为<a href="#appendix_7">$^7$</a>) </p><script type="math/tex; mode=display">\begin{align}  \frac{\text{d}Y_\chi}{\text{d}x} = \frac{s}{xH}\langle\sigma_{ann}v\rangle[(Y^0_{\chi})^2 - (Y_{\chi})^2]\end{align}</script><p>其中$s$、$H$与$x$的依赖关系为 </p><script type="math/tex; mode=display">\begin{align}  s = g_{*s}\frac{2\pi^2}{45}(\frac{m}{x})^3, \quad H = \sqrt{\frac{4\pi^3 Gg_*}{45}}(\frac{m}{x})^2\end{align}</script><p>代入Boltzmann方程中，</p><script type="math/tex; mode=display">\begin{align}  \frac{\text{d}Y_\chi}{\text{d}x} = \Big(\frac{\pi}{45Gg_*}\Big)^{\frac{1}{2}}g_{*s}m\frac{1}{x^2}[(Y^0_{\chi})^2 - (Y_{\chi})^2]\end{align}</script><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><span id="ref_1">[1] H. Murayama, Physics beyond the standard model and dark matter, arXiv: <a href="https://arxiv.org/pdf/0704.2276.pdf" target="_blank" rel="noopener">0704.2276</a>.</span><br><span id="ref_2">[2] G. Arcadi <em>et al.</em>, The Waning of the WIMP? A review of models, searches, and constraints, arXiv: <a href="https://arxiv.org/pdf/1703.07364.pdf" target="_blank" rel="noopener">1703.07364</a>.</span></p><h2 id="附录（数学推导）"><a href="#附录（数学推导）" class="headerlink" title="附录（数学推导）"></a>附录（数学推导）</h2><p>本节推导中均采用自然单位制，即$\hbar=c=k_B=1$，这些物理符号依次为角普朗克常数、光速和Boltzmann常数。</p><ol><li><span id="appendix_1">只需要证明两个式子左边相等，导数展开即可。</span><script type="math/tex; mode=display">\begin{align} \frac{1}{a^3}\frac{\text{d}(n_\chi a^3)}{\text{d}t} = \frac{1}{a^3}(\dot{n}_\chi a^3 + 3n_\chi a^2 \dot{a}) = \dot{n}_\chi + 3n_\chi \frac{\dot{a}}{a} = \frac{\text{d}n_\chi}{\text{d}t} + 3Hn_\chi\end{align}</script>最后一步用到了Hubble常数的定义。</li><li><span id="appendix_2">假设宇宙在膨胀过程中总熵守恒，则粒子数密度$n$与熵密度$s$都在随膨胀而有一个$a^{-3}$因子的变化（一般称$a^3$为共动体积），因而它们的比值$Y = \cfrac{n}{s}$为常数，之所以说近似，是考虑到由于热运动而造成的局域密度变化。</span></li><li><span id="appendix_3">(1) 不确定关系给出粒子的坐标不确定度$\Delta{q}$与其共轭动量的不确定度满足关系$\Delta{q}\Delta{p}\approx h$。自由度为$1$ 的粒子的相格大小(由$q$、$p$描述的粒子运动状态，即相体积)为$h$。因此三维自由粒子（这里已经假设暗物质退耦阶段的早期宇宙空间是三维的）在相体积$V\text{d}p_x\text{d}p_y\text{d}p_z$中的量子态数为$\cfrac{V\text{d}p_x\text{d}p_y\text{d}p_z}{h^3}$，而数密度则为$\cfrac{\text{d}p_x\text{d}p_y\text{d}p_z}{h^3}$。（三维相格大小为$h^3$，并且由于物理规律在空间中的平移旋转不变性，$\int \text{d}q_x\text{d}q_y\text{d}q_z$直接积分得到坐标体积$V$）。在自然单位制之下$h=(2\pi\hbar=)2\pi$，于是我们得到了积分元$\cfrac{\text{d}^3\vec{p}}{(2\pi)^3}$。<br>(2) 注意到$\rho$就是能量密度，<br><script type="math/tex">\begin{align} s=\frac{S}{V}=\frac{1}{V}\int\frac{\text{d}U+P\text{d}V}{T}=\frac{1}{V}\int\frac{\rho \text{d}V+P\text{d}V}{T}=\frac{\rho+P}{T}\end{align}</script></span></li><li><span id="appendix_4">（几乎是从第一性原理出发）分别计算$\rho$和$P$，对于辐射(光子气体)，服从Bose-Einstein分布，由于黑体不断辐射和吸收光子，光子数是不守恒的（也就是说能量$E$守恒但数目$N$不守恒，平衡态下光子的化学势为$0$）所以光子气体的统计分布为：</span><script type="math/tex; mode=display">\begin{align} \Big(f(\vec{p})=\Big)f(\omega, T) = \frac{g_*}{e^{\beta\varepsilon_*}-1} = \frac{g_*}{e^{\frac{\omega}{T}}-1}\end{align}</script>光子的自旋量子数为$1$，自旋在动量方向上可以取两种可能值$\pm\hbar$(相当于左右圆偏振)，即$g_*=2$，在体积$V$，动量$p$到$p+dp$范围内，光子量子态数目为 <script type="math/tex; mode=display">\begin{align} \text{d}n_{q}(p) = \frac{4\pi V}{(2\pi)^3}p^2 \text{d}p = \frac{Vp^2}{2\pi^2}\text{d}p\end{align}</script>而$\varepsilon=(cp=)p$且$\varepsilon=(\hbar\omega=)\omega$，即$\varepsilon=\omega=p$，平均光子数为 <script type="math/tex; mode=display">\begin{align} \text{d}n(\omega, T) = f(\omega, T)\text{d}n_{q}(\omega) = \frac{V}{\pi^2}\frac{\omega^2\text{d}\omega}{e^{\frac{\omega}{T}}-1}\end{align}</script>辐射场内部能量(<strong>Planck公式</strong>)为 <script type="math/tex; mode=display">\begin{align} U(\omega, T)\text{d}\omega = \Big( \hbar\omega\cdot \text{d}n(\omega, T) = \frac{V}{\pi^2}\frac{\hbar\omega^3\text{d}\omega}{e^{\frac{\omega}{T}}-1} = \Big) \frac{V}{\pi^2}\frac{\omega^3\text{d}\omega}{e^{\frac{\omega}{T}}-1}\end{align}</script>因此 <script type="math/tex; mode=display">\begin{align}  & U = \int_0^\infty U(\omega, T)\text{d}\omega = \frac{VT^4}{\pi^2}\int_0^\infty\frac{x^3\text{d}x}{e^x-1} = \frac{\pi^2 }{15}VT^4 \\  & \rho(\omega, T) = \frac{U(\omega, T)}{V} = \frac{1}{\pi^2}\frac{\omega^3}{e^{\frac{\omega}{T}}-1}, \quad \rho = \frac{U}{V} = \frac{\pi^2}{15}T^4 \\  & n = \frac{1}{V}\int_0^\infty \text{d}n(\omega, T) = \frac{T^3}{\pi^2}\int_0^\infty \frac{x^2\text{d}x}{e^x-1} = \frac{2\xi(3)}{\pi^2}T^3\end{align}</script>以上，我们通过分析方法求得了辐射内能密度$\rho$，下面我们将通过系综的方法重新得到这一结果，并且得到压强$P$的表达式。光子气体的巨配分函数的对数为（引入变量$x=\cfrac{\omega}{T}$）：<script type="math/tex; mode=display">\begin{align} \ln{\Xi} &= -\frac{V}{8\pi^3}\int 2\ln{(1-e^{-\frac{\omega}{T}})}\text{d}^3\vec{\omega} \\  &= -\frac{V}{\pi^2}\int_0^{\infty}\omega^2\ln{(1-e^{-\frac{\omega}{T}})\text{d}\omega} \\  &= -\frac{VT^3}{\pi^2}\int_0^{\infty}x^2\ln{(1-e^{-x})}\text{d}x \\  &= \frac{\pi^2}{45}VT^3\end{align}</script>从而(这里$\beta=\cfrac{1}{T}$) <script type="math/tex; mode=display">\begin{align} \rho &= -\frac{1}{V}\frac{\partial}{\partial\beta}\ln{\Xi} = \frac{\pi^2}{15}T^4 \\  P &= - \frac{1}{\beta}\frac{\partial}{\partial V}\ln{\Xi} = \frac{\pi^2}{45}T^4\end{align}</script>比较以上两式立得 $\rho = 3P$。<br>$\Big[$推导过程中用到了如下积分事实：<script type="math/tex; mode=display">\begin{align} I(n) = \int_0^\infty\frac{x^n\text{d}x}{e^x-1} &= \sum_{i=1}^\infty\frac{1}{i^n}\int_0^\infty y^{n-1}e^{-y}\text{d}y = \zeta(n)\Gamma(n), \\  \therefore \quad I(3) &= \zeta(3)\Gamma(3) = \frac{\pi^4}{15} \\ -\int_0^{\infty}x^2\ln{(1-e^{-x})}\text{d}x &= -( [\frac{x^3}{3}\ln{(1-e^{-x})}]_0^{\infty} - \frac{1}{3}\int_0^\infty\frac{x^3\text{d}x}{e^x-1}) \\  &= \frac{1}{3}\int_0^\infty\frac{x^3\text{d}x}{e^x-1}=\frac{1}{3}I(3)=\frac{\pi^4}{45}\end{align}</script>$I(n) = \zeta(n)\Gamma(n)$是数学分析中的一个经典结果，其中$\zeta(z)$是Riemann $\zeta$函数。$\Big]$</li><li><span id="appendix_5">上面一条附录给出了零质量Boson的计算结果，这里将Fermion的情况一并总结出来（与Boson唯一的区别是将分布函数$f(\vec{p})$替换成Fermion的）：</span><script type="math/tex; mode=display">\begin{align} \text{For Boson: }\quad & n=g\frac{\xi(3)}{\pi^2}T^3, \quad \rho=g\frac{\pi^2}{30}T^4, \quad s=g\frac{2\pi^2}{45}T^3 \\  \text{For Fermion: }\quad & n=g\frac{3}{4}\frac{\xi(3)}{\pi^2}T^3, \quad \rho=g\frac{7}{8}\frac{\pi^2}{30}T^4, \quad s=g\frac{7}{8}\frac{2\pi^2}{45}T^3\end{align}</script></li><li><span id="appendix_6">(1) $E_\chi = \sqrt{m_\chi^2+p_\chi^2} \simeq m_\chi + \cfrac{\vec{p}_\chi^2}{m_\chi}$ </span><br>(2) 如果不采取近似，那么（正号为Fermion，符号为Boson） <script type="math/tex; mode=display">\begin{align} n_\chi^0 = \int\frac{\text{d}^3\vec{p}}{(2\pi)^3}f(\vec{p}) = \frac{4\pi g_*}{(2\pi)^3}\int_0^\infty \frac{p^2\text{d}p}{e^{\dfrac{E-\mu}{T}}\pm1} = \frac{g_*}{2\pi^2}\int_0^\infty \frac{p^2\text{d}p}{e^{\dfrac{\sqrt{m^2+p^2}-\mu}{T}}\pm1}\end{align}</script>将是一个比较难处理的积分，好在这时的情况是非相对论的，可以采用Maxwell-Boltzmann分布。</li><li><span id="appendix_7">设物态方程具有形式$P=w\rho$，对于热物质(相对论性物质，如辐射<a href="#appendix_4">$^4$</a>)$w=\cfrac{1}{3}$。一方面，由<a href="https://www.jianshu.com/p/2d78574ac8f6" target="_blank" rel="noopener">Friedmann方程</a>导出式，</span><script type="math/tex; mode=display">\begin{align} \dot{\rho} = -\frac{3\dot{a}}{a}(\rho+P) = -\frac{4\dot{a}}{a} \quad \Rightarrow \quad \rho \propto a^{-3(1+w)} = a^{-4}\end{align}</script>另一方面，我们从黑体辐射公式又知道 <script type="math/tex; mode=display">\begin{align} \rho = \frac{\pi^2}{45}T^4 \propto T^4\end{align}</script>于是得到 <script type="math/tex; mode=display">\begin{align} T\propto a^{-1}\end{align}</script>还是回到Friedmann方程(这里使用第二方程)，既然我们说宇宙早期辐射主导(同时研究对象取为$\Lambda=0,k=0$的Einstein-de Sitter宇宙，反正辐射绝对主导)，那么能量密度$\rho = \rho_r + \rho_m \simeq \rho_r = \rho_{r0}(\cfrac{a_0}{a})^{4}$（事实上上面的推导我们已经采用这一近似，且$a_0=a(t_0)$，注意尽管$\rho\simeq\rho_r$但$\rho_0 = \rho_{r0} + \rho_{m0}$严格大于$\rho_{r0}$，这里的下角标“$_0$”统一表示现今宇宙的参数值），从而 <script type="math/tex; mode=display">\begin{align} & \Big(\frac{\dot{a}}{a}\Big)^{2} = \frac{8\pi G\rho}{3} = \frac{8\pi G\rho_{r0}}{3}\Big(\frac{a_0}{a}\Big)^{4} = \Omega_r H_0^2 a_0^4 a^{-4} \\  \Rightarrow\quad & |a\dot{a}| = \Omega_r^{\frac{1}{2}} H_0 a_0^2 \text{  or  } a\text{d}a = \Omega_r^{\frac{1}{2}} H_0 a_0^2\text{d}t \\  \Rightarrow\quad & a^2 \propto t \text{  or  } a \propto t^{\frac{1}{2}}\end{align}</script>其中$H_0$和$a_0$为现在的Hubble常数和尺度因子，$\Omega_r\equiv\cfrac{8\pi G\rho_{r0}}{3H_0^2}$为现在的辐射密度参数。终于，我们导出了早期宇宙(非暴胀时期)温度与时间的关系：<script type="math/tex; mode=display">\begin{align} T \propto t^{-\frac{1}{2}} \quad \Big( t = \frac{1}{2\Omega_r^{1/2} H_0}\Big(\frac{T_0}{T}\Big)^{2} = \frac{1}{2H(T)} \Big)\end{align}</script>上式最后一个等号是由于 <script type="math/tex; mode=display">\begin{align} H^2=H^2(T) = \frac{8\pi G}{3}\rho \simeq \frac{8\pi G}{3}\rho_r = \frac{8\pi G}{3}\rho_{r0}\Big(\frac{T}{T_0}\Big)^4 = \Omega_r H_0^2 \Big(\frac{T}{T_0}\Big)^4\end{align}</script>并且我们可以得到 <script type="math/tex; mode=display">\begin{align} \frac{\text{d}t}{\text{d}x} = \frac{1}{m}\frac{\text{d}t}{\text{d}(T^{-1})} = \frac{1}{m}\frac{T_0^2}{\Omega_r^{1/2} H_0}\frac{1}{T} = \frac{1}{xH(T)}\end{align}</script>这里$x=\cfrac{m}{T}$，把这个关系应用到我们需要的共动数密度导数上，<script type="math/tex; mode=display">\begin{align} \frac{\text{d}Y_\chi}{\text{d}x} = \frac{\text{d}t}{\text{d}x}\frac{\text{d}Y_\chi}{\text{d}t} = \frac{1}{xH(T)}\cdot\frac{1}{s}\Big(\frac{\text{d}n_\chi}{\text{d}t} - Y_\chi\frac{\text{d}s}{\text{d}t}\Big)\end{align}</script>这里括号中第一项将直接代入关于$n_\chi$的Boltzmann方程，第二项基于熵守恒 <script type="math/tex; mode=display">\begin{align}  & 0 = \frac{\text{d}S}{\text{d}t} = \frac{\text{d}(sa^3)}{\text{d}t} = a^3\frac{\text{d}s}{\text{d}t}+ 3a^2s\frac{\text{d}a}{\text{d}t} \\  & \quad \Rightarrow \quad \frac{\text{d}s}{\text{d}t} + 3Hs = 0\end{align}</script>从而 <script type="math/tex; mode=display">\begin{align} \frac{\text{d}Y_\chi}{\text{d}x} &= \frac{1}{xHs}(-3Hn_\chi + \langle\sigma_{ann}v\rangle[(n^0_{\chi})^2 - (n_{\chi})^2] - Y_\chi(-3Hs)) \\  &= \frac{s}{xH}\langle\sigma_{ann}v\rangle[(Y^0_{\chi})^2 - (Y_{\chi})^2]\end{align}</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> physics </tag>
            
            <tag> particle physics </tag>
            
            <tag> dark matter </tag>
            
            <tag> theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【探测器】Fano因子</title>
      <link href="academic/%E3%80%90%E6%8E%A2%E6%B5%8B%E5%99%A8%E3%80%91Fano%E5%9B%A0%E5%AD%90/"/>
      <url>academic/%E3%80%90%E6%8E%A2%E6%B5%8B%E5%99%A8%E3%80%91Fano%E5%9B%A0%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在电离探测器中，对于给定的能量损失，载荷子对（电子-离子对）的产生是一种随机过程。载荷子对数若按Poisson统计涨落应为$\sqrt{n}$，而实际上由于受能量守恒定律的约束，这个涨落会不同于$\sqrt{n}$，并且依赖于物质种类，记为$\sqrt{F} (F &lt; n)$。本文根据已有文献的思路整理了这一结论的证明。</p></blockquote><a id="more"></a><p><strong>证明：</strong></p><ol><li>在给出相关的证明之前，这里先说明，我们感兴趣的量是<strong><em>能量分辨率</em></strong>。这是由于一个电离过程的总电离（总的电子-离子对数目）只依赖于过程中的能量损失$\Delta E$和$W$值（形成一对电子-离子所需的有效平均能量）:<script type="math/tex; mode=display">\begin{align}  n_T = \frac{\Delta E}{W} \end{align}</script>从而，对于固定介质的情形，能量的涨落就是电离数的涨落。为了记号简洁，下面记$n\equiv n_T$。</li><li>能量分辨率定义为：<script type="math/tex; mode=display">\begin{align}  R = \frac{FWHM(E)}{E} = 2.35\times \frac{\sigma(E)}{E} \end{align}</script>如果假设这一随机过程就是最简单的Poisson过程，那么：<script type="math/tex; mode=display">\begin{align}  R_{\text{Poisson}} = 2.35\times \frac{W\times\sqrt{\bar{n}}}{W\times\bar{n}} = 2.35\times \frac{1}{\sqrt{\bar{n}}} \end{align}</script>其中$\bar{n}$为对于确定能量的吸收（或能量损失）由多次实验得到的平均值，其实就是该能量吸收的总电离（注意：统计随机量的平均值才是理论模型中的物理量的值，单次的值由于实验条件限制仅是一个随机量）。</li><li>一次实验中，令$E=E_{\text{total}}$为探测器中某一固定沉积能量，该能量分多次（设为$N$）传递给探测器介质（如工作气体），设第$i$次相互作用传递能量（即能损）为$E_i$，产生的电子-离子对数量为$m_i$。$N$次相互作用后能量被全部吸收。根据这些定义，我们有: <script type="math/tex; mode=display">\begin{align}  \bar{m_i} = \frac{E_i}{W},\quad \bar{n} = \frac{E}{W} \end{align}</script>满足<script type="math/tex; mode=display">\begin{align}  \sum^{N}_{i=1}\bar{m_i} = \bar{n},\quad \sum^{N}_{i=1} E_i = E \end{align}</script></li><li>设我们共进行了$L$次理想实验，第$k$次实验中产生的电子-离子对总数为$n_k$对，相应地，能量分$N_k$次相互作用传递给探测器介质，第$i$个径迹段（第$i$次相互作用）中产生的电离数为$m_{ik}$个，于是：<script type="math/tex; mode=display">\begin{align} \sigma^{2}(n) &= \overline{(n-\bar{n})^2} = \frac{1}{L}\sum_{k=1}^{L}(n_k - \bar{n})^2 = \frac{1}{L}\sum_{k=1}^{L} (\sum_{i=1}^{N_k}m_{ik}-\frac{E}{W})^2 \qquad \\ &= \frac{1}{L}\sum_{k=1}^{L} (\sum_{i=1}^{N_k}m_{ik}-\frac{1}{W}\sum_{i=1}^{N_k}E_{ik})^2 = \frac{1}{L}\sum_{k=1}^{L}[\sum_{i=1}^{N_k}(m_{ik} - \frac{E_{ik}}{W})]^2\end{align}</script>引入符号$\nu_{ik} = m_{ik} - \cfrac{E_{ik}}{W}$，则<script type="math/tex; mode=display">\begin{align}  \sigma^{2}(n) &= \frac{1}{L}\sum_{k=1}^{L}(\sum_{i=1}^{N_k}\nu_{ik})^2 = \frac{1}{L}(\sum_{k=1}^{L}\sum_{i=1}^{N_k}\nu^{2}_{ik} + \sum_{k}^{L}\sum_{i\neq j}^{N_k}\nu_{ik}\nu_{jk}) \\ &= \frac{1}{L}(\sum_{k=1}^{L}\sum_{i=1}^{N_k}\nu^{2}_{ik} + \sum_{k=1}^{L}\sum_{i=1}^{N_k}\nu_{ik}(\sum_{j=1}^{N_k}\nu_{jk} - \nu_{ik}))\end{align}</script>这里我们记平均值$\bar{\nu}_{k} = \cfrac{1}{N_k}\sum_{j=1}^{N_k}\nu_{jk}$，上式化为（这里将右端最后一项$\nu_{ik}$用$\bar{\nu}_k$近似，假定$N_k$与$\bar{\nu}_k$不相关联，且当$N_k$足够大时$\bar{\nu}_k=\bar{\nu}$）：<script type="math/tex; mode=display">\begin{align}  \sigma^{2}(n) =& \frac{1}{L}(\sum_{k=1}^{L}N_{k}\overline{\nu_{k}^2} + \sum_{k=1}^{L}N_{k}\bar{\nu}_{k}(N_{k}{\nu}_{k}-{\nu}_{k})) \\ =& \overline{N}\overline{\nu^2} + (\overline{N^2} - \overline{N}) \bar{\nu}^2\end{align}</script>注意到$\bar{\nu}=\overline{m_i-\frac{E_i}{W}}=\overline{m_i} - \frac{E_i}{W}=0$，因此只有第一项有贡献。由理想实验自洽性，$\overline{N}=\frac{\bar{n}}{\bar{m}_i}$，所以<script type="math/tex; mode=display">\begin{align}  \sigma^{2}(n) = \overline{N}\cdot\overline{(m_i-\frac{E_i}{W})^2} = \frac{\overline{(m_i - \frac{E_i}{W})^2}}{\bar{m}_i}\bar{n} \equiv F\cdot\bar{n} = F\cdot\sigma_{\text{Poisson}}^2(n) \end{align}</script>其中<strong>$F\equiv\cfrac{\overline{(m_i - \cfrac{E_i}{W})^2}}{\bar{m}_i}$</strong>即所谓的<strong>Fano因子</strong>，我们得到：<script type="math/tex; mode=display">\begin{align}  R_{Fano} = \sqrt{F} \cdot R_{\text{Poisson}} = 2.35 \times \sqrt{\frac{F}{\bar{n}}} \end{align}</script>证毕。</li></ol><p><strong>说明：</strong></p><ol><li>整个证明过程已经假定了粒子事件的能量完全沉积在探测器的灵敏体积中。</li><li>对于低能事件，“$N$足够大”这一假设一般不能被满足。</li><li>Fano因子$F$越小（总是小于$1$），能量分辨率越好，极限最差情况为Poisson情形。</li></ol><p><strong>参考文献：</strong><br>[1] Sauli F. Principles of Operation of Multiwire Proportional and Drift Chambers [M]. CERN-77-09.<br>[2] Fano U. Ionization Yield of Radiations: II . The Fluctuation of the Number of Ions [J]. Phys. Rev. , 1947(72): 26-29.<br>[3] Walenta A H. Review of the Physics and Technology of Charged Particle Detectors [M]. Preprint University of Siegen SI-83-23, 1983.  </p>]]></content>
      
      
      <categories>
          
          <category> academic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> physics </tag>
            
            <tag> detector physics </tag>
            
            <tag> theory </tag>
            
            <tag> Poisson process </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
